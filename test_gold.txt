SELECT COUNT(*) FROM Customers	customers_card_transactions
SELECT COUNT(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  "162"	customers_card_transactions
SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  "162"	customers_card_transactions

SELECT * FROM Customers WHERE customer_first_name  =  "Art" AND customer_last_name  =  "Turcotte"	customers_card_transactions
SELECT * FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  "Art" AND T2.customer_last_name  =  "Turcotte"	customers_card_transactions
SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  "Art" AND T2.customer_last_name  =  "Turcotte"	customers_card_transactions

SELECT COUNT(*) FROM Accounts	customers_card_transactions
SELECT customer_id, count(*) FROM Accounts GROUP BY customer_id	customers_card_transactions
SELECT customer_id FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1	customers_card_transactions
SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1	customers_card_transactions

SELECT COUNT(*) FROM Accounts	customers_card_transactions
SELECT T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1	customers_card_transactions
SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1	customers_card_transactions

SELECT count(*) FROM Customers	customers_card_transactions
SELECT COUNT(*) FROM Accounts	customers_card_transactions
SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)	customers_card_transactions

SELECT COUNT(*) FROM Customers	customers_card_transactions
SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id	customers_card_transactions
SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id	customers_card_transactions
SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id	customers_card_transactions

SELECT * FROM Customers WHERE customer_first_name  =  "Aniyah" AND customer_last_name  =  "Feest"	customers_card_transactions
SELECT customer_address FROM Customers WHERE customer_first_name  =  "Aniyah" AND customer_last_name  =  "Feest"	customers_card_transactions
SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  "Aniyah" AND customer_last_name  =  "Feest"	customers_card_transactions

SELECT COUNT(*) FROM Customers_cards	customers_card_transactions
SELECT T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  "4560596484842"	customers_card_transactions
SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  "4560596484842"	customers_card_transactions

SELECT * FROM Customers WHERE customer_first_name  =  "Art" AND customer_last_name  =  "Turcotte"	customers_card_transactions
SELECT customer_phone FROM Customers WHERE customer_first_name  =  "Art" AND customer_last_name  =  "Turcotte"	customers_card_transactions
SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  "Art" AND T2.customer_last_name  =  "Turcotte"	customers_card_transactions

SELECT distinct attribute_data_type FROM Attribute_Definitions	product_catalog
SELECT attribute_data_type, count(*) FROM Attribute_Definitions GROUP BY attribute_data_type	product_catalog
SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  1	product_catalog
SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3	product_catalog

SELECT count(distinct catalog_publisher) FROM catalogs	product_catalog
SELECT count(distinct catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE "%Murray%"	product_catalog
SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE "%Murray%"	product_catalog

SELECT catalog_id, catalog_publisher FROM catalogs	product_catalog
SELECT catalog_publisher, count(*) FROM catalogs GROUP BY catalog_publisher	product_catalog
SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) ASC LIMIT 1	product_catalog
SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1	product_catalog

SELECT * FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id  =  t2.catalog_id	product_catalog
SELECT * FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5	product_catalog
SELECT t1.catalog_name FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5	product_catalog
SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5	product_catalog

SELECT count(*) FROM attribute_definitions	product_catalog
SELECT attribute_id FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_id ORDER BY count(*) DESC LIMIT 1	product_catalog
SELECT * FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_id  =  (SELECT attribute_id FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_id ORDER BY count(*) DESC LIMIT 1)	product_catalog
SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_id  =  (SELECT attribute_id FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_id ORDER BY count(*) DESC LIMIT 1)	product_catalog

SELECT catalog_entry_id, price_in_dollars, price_in_euros, price_in_pounds FROM catalog_contents	product_catalog
SELECT catalog_entry_id, price_in_dollars FROM catalog_contents	product_catalog
SELECT * FROM catalog_contents  ORDER BY price_in_dollars DESC LIMIT 1	product_catalog
SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1	product_catalog

SELECT catalog_entry_id, price_in_dollars FROM catalog_contents	product_catalog
SELECT * FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars DESC LIMIT 1	product_catalog
SELECT * FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1	product_catalog
SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1	product_catalog

SELECT catalog_entry_name FROM catalog_contents	product_catalog
SELECT catalog_entry_name, price_in_euros FROM catalog_contents	product_catalog
SELECT avg(price_in_euros) FROM catalog_contents	product_catalog
SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents	product_catalog

SELECT catalog_entry_name, height, width, length FROM catalog_contents	product_catalog
SELECT catalog_entry_name, height, width, length FROM catalog_contents ORDER BY width DESC	product_catalog
SELECT catalog_entry_name, height, width, length FROM catalog_contents ORDER BY height DESC	product_catalog
SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1	product_catalog

SELECT distinct capacity FROM catalog_contents	product_catalog
SELECT capacity FROM catalog_contents group by capacity order by count(*) DESC LIMIT 1	product_catalog
SELECT capacity FROM catalog_contents ORDER BY capacity ASC LIMIT 1	product_catalog
SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1	product_catalog

SELECT catalog_entry_name FROM catalog_contents	product_catalog
SELECT catalog_entry_name, product_stock_number FROM catalog_contents	product_catalog
SELECT count(*) FROM catalog_contents WHERE product_stock_number LIKE "2%"	product_catalog
SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE "2%"	product_catalog

SELECT catalog_entry_id, catalog_level_number FROM Catalog_Contents_Additional_Attributes	product_catalog
SELECT catalog_entry_id, catalog_level_number FROM Catalog_Contents_Additional_Attributes group by catalog_entry_id having count (distinct catalog_level_number) > 1	product_catalog
SELECT catalog_entry_id, catalog_level_number FROM Catalog_Contents_Additional_Attributes WHERE catalog_level_number  =  "8"	product_catalog
SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  "8"	product_catalog

SELECT * FROM catalog_contents WHERE LENGTH  <  3	product_catalog
SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3	product_catalog
SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR height  >  5	product_catalog

SELECT attribute_id,  attribute_value FROM Catalog_Contents_Additional_Attributes	product_catalog
SELECT attribute_id,  attribute_value FROM Catalog_Contents_Additional_Attributes WHERE attribute_value  =  1	product_catalog
SELECT attribute_id,  attribute_value FROM Catalog_Contents_Additional_Attributes WHERE attribute_value  =  0	product_catalog
SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0	product_catalog

SELECT distinct address FROM member	coffee_shop
SELECT name FROM member WHERE address  =  'Harford'	coffee_shop
SELECT name FROM member WHERE address  =  'Harford' OR address  =  'Waterbury'	coffee_shop

SELECT count(*) FROM member WHERE age  <  30	coffee_shop
SELECT count(*) FROM member WHERE Membership_card  =  'Black'	coffee_shop
SELECT count(*) FROM member WHERE Membership_card  =  'Black' OR age  <  30	coffee_shop
SELECT name ,  member_id FROM member WHERE Membership_card  =  'Black' OR age  <  30	coffee_shop

SELECT distinct Membership_card FROM member	coffee_shop
SELECT count(*), Membership_card FROM member GROUP BY Membership_card	coffee_shop
SELECT Membership_card FROM member GROUP BY Membership_card HAVING count(*)  >  3	coffee_shop
SELECT Membership_card FROM member GROUP BY Membership_card HAVING count(*)  >  5	coffee_shop

SELECT * FROM member	coffee_shop
SELECT * FROM member WHERE age  >  40	coffee_shop
SELECT * FROM member WHERE age  <  30	coffee_shop
SELECT address FROM member WHERE age  <  30 INTERSECT SELECT address FROM member WHERE age  >  40	coffee_shop

SELECT name FROM member WHERE address  =  'Hartford'	coffee_shop
SELECT name FROM member WHERE address  =  'Waterbury'	coffee_shop
SELECT membership_card FROM member WHERE address  =  'Hartford' INTERSECT SELECT membership_card FROM member WHERE address  =  'Waterbury'	coffee_shop

SELECT distinct Membership_card FROM member	coffee_shop
SELECT count(*) FROM member WHERE Membership_card  =  'Black'	coffee_shop
SELECT address FROM member WHERE Membership_card  =  'Black'	coffee_shop
SELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card  =  'Black'	coffee_shop

SELECT num_of_staff, score FROM shop	coffee_shop
SELECT avg(num_of_staff) ,  avg(score) FROM shop	coffee_shop

SELECT max(score) FROM shop	coffee_shop
SELECT avg(score) FROM shop	coffee_shop
SELECT shop_id,  address FROM shop WHERE score  <  (SELECT avg(score) FROM shop)	coffee_shop

SELECT t1.address FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id  =  t2.shop_id	coffee_shop
SELECT t1.address, t1.num_of_staff FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id  =  t2.shop_id	coffee_shop
SELECT address ,  num_of_staff FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM happy_hour)	coffee_shop

SELECT shop_id FROM happy_hour	coffee_shop
SELECT shop_id FROM happy_hour WHERE MONTH  =  'May'	coffee_shop
SELECT t1.address,  t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id  =  t2.shop_id WHERE MONTH  =  'May'	coffee_shop

SELECT shop_id,  count(*) FROM happy_hour GROUP BY shop_id	coffee_shop
SELECT shop_id FROM happy_hour GROUP BY shop_id ORDER BY count(*) DESC LIMIT 1	coffee_shop

SELECT count(*) FROM happy_hour	coffee_shop
SELECT count(*) FROM happy_hour GROUP BY MONTH	coffee_shop
SELECT MONTH FROM happy_hour GROUP BY MONTH ORDER BY count(*) DESC LIMIT 1	coffee_shop

SELECT product FROM product	store_product
SELECT product, max_page_size FROM product	store_product
SELECT product FROM product WHERE max_page_size = 'A4'	store_product
SELECT max_page_size FROM product GROUP BY max_page_size HAVING count(*) > 3	store_product

SELECT district_name FROM district	store_product
SELECT district_name, Headquartered_City FROM district	store_product
SELECT district_name FROM district WHERE City_Population > 100000	store_product
SELECT district_name FROM district WHERE city_area  >  10 OR City_Population  >  100000	store_product

SELECT district_name FROM district	store_product
SELECT district_name, City_Population FROM district	store_product
SELECT district_name FROM district WHERE City_Population > (SELECT AVG(City_Population) FROM district)	store_product
SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1	store_product

SELECT District_name FROM district	store_product
SELECT District_name, City_Area FROM district	store_product
SELECT District_name FROM district WHERE City_Area < (SELECT AVG(City_Area) FROM district)	store_product
SELECT District_name FROM district WHERE City_Area = (SELECT MIN(City_Area) FROM district)	store_product

SELECT District_name FROM district	store_product
SELECT DISTINCT t1.District_name FROM district as t1 JOIN store_district AS t2 ON t1.District_ID = t2.District_ID JOIN store AS t3 ON t3.Store_ID = t2.Store_ID	store_product
SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t3.district_name  =  "Hafizabad District"	store_product
SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t3.district_name  =  "Khanewal District"	store_product

SELECT City_Population FROM district	store_product
SELECT t3.Store_name, t1.City_Population FROM district as t1 JOIN store_district AS t2 ON t1.District_ID = t2.District_ID JOIN store AS t3 ON t3.Store_ID = t2.Store_ID	store_product
SELECT t3.Store_name FROM district as t1 JOIN store_district AS t2 ON t1.District_ID = t2.District_ID JOIN store AS t3 ON t3.Store_ID = t2.Store_ID WHERE t1.City_Population > (SELECT AVG(City_Population) FROM district)	store_product
SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id WHERE district_id  =  (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1)	store_product

SELECT Store_Name FROM store	store_product
SELECT Type FROM store WHERE Store_name = "Blackville"	store_product
SELECT t1.district_name FROM district as t1 JOIN store_district AS t2 ON t1.District_ID = t2.District_ID JOIN store AS t3 ON t3.Store_ID = t2.Store_ID WHERE t3.Store_name = "Blackville"	store_product
SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.store_name  =  "Blackville"	store_product

SELECT headquartered_city FROM district	store_product
SELECT Store_Name FROM store	store_product
SELECT DISTINCT t1.headquartered_city FROM district as t1 JOIN store_district AS t2 ON t1.District_ID = t2.District_ID JOIN store AS t3 ON t3.Store_ID = t2.Store_ID	store_product
SELECT t3.headquartered_city ,  count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city	store_product

SELECT t1.headquartered_city, t3.store_name FROM district as t1 JOIN store_district AS t2 ON t1.District_ID = t2.District_ID JOIN store AS t3 ON t3.Store_ID = t2.Store_ID	store_product
SELECT t1.headquartered_city, count(*) FROM district as t1 JOIN store_district AS t2 ON t1.District_ID = t2.District_ID JOIN store AS t3 ON t3.Store_ID = t2.Store_ID GROUP BY t1.headquartered_city	store_product
SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city ORDER BY count(*) ASC LIMIT 1	store_product
SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city ORDER BY count(*) DESC LIMIT 1	store_product

SELECT store_name FROM store	store_product
SELECT DISTINCT t1.store_name FROM store AS t1 JOIN store_product AS t2 ON t1.Store_ID = t2.Store_ID JOIN product AS t3 ON t2.Product_ID = t3.Product_ID	store_product
SELECT t3.product FROM store AS t1 JOIN store_product AS t2 ON t1.Store_ID = t2.Store_ID JOIN product AS t3 ON t2.Product_ID = t3.Product_ID	store_product
SELECT t1.product FROM product AS t1 JOIN store_product AS t2 ON t1.product_id  =  t2.product_id JOIN store AS t3 ON t2.store_id  =  t3.store_id WHERE t3.store_name  =  "Miramichi"	store_product

SELECT product FROM product	store_product
SELECT product, pages_per_minute_color FROM product	store_product
SELECT product FROM product WHERE pages_per_minute_color < 5	store_product
SELECT product FROM product WHERE max_page_size  =  "A4" AND pages_per_minute_color  <  5	store_product

SELECT product FROM product	store_product
SELECT product, max_page_size FROM product	store_product
SELECT product FROM product WHERE max_page_size = "A4"	store_product
SELECT product FROM product WHERE max_page_size  =  "A4" OR pages_per_minute_color  <  5	store_product

SELECT product FROM product	store_product
SELECT product FROM product WHERE product LIKE "%Canon%"	store_product
SELECT product FROM product WHERE product LIKE "%Fujitsu%"	store_product
SELECT product FROM product WHERE product LIKE "%Scanner%"	store_product

SELECT DISTINCT max_page_size FROM product	store_product
SELECT product FROM product	store_product
SELECT product, max_page_size FROM product	store_product
SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1	store_product

SELECT product FROM product	store_product
SELECT product, max_page_size FROM product	store_product
SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*)  DESC LIMIT 1	store_product
SELECT product FROM product WHERE max_page_size != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1)	store_product

SELECT district_name FROM district	store_product
SELECT avg(city_area) FROM district	store_product
SELECT district_name FROM district WHERE city_area > (SELECT avg(city_area) FROM district)	store_product
SELECT sum(city_population) FROM district WHERE city_area  >  (SELECT avg(city_area) FROM district)	store_product

SELECT * FROM camera_lens WHERE focal_length_mm  >  15	mountain_photos
SELECT count(*) FROM camera_lens WHERE focal_length_mm  >  15	mountain_photos

SELECT brand ,  name FROM camera_lens	mountain_photos
SELECT brand ,  name FROM camera_lens ORDER BY max_aperture DESC	mountain_photos

SELECT * FROM photos	mountain_photos
SELECT id ,  color ,  name FROM photos	mountain_photos

SELECT max(height) ,  avg(height) FROM mountain	mountain_photos
SELECT max(height) FROM mountain	mountain_photos
SELECT max(height) ,  avg(height) FROM mountain	mountain_photos

SELECT prominence FROM mountain	mountain_photos
SELECT prominence FROM mountain WHERE country  =  'Morocco'	mountain_photos
SELECT avg(prominence) FROM mountain WHERE country  =  'Morocco'	mountain_photos

SELECT * FROM mountain	mountain_photos
SELECT * FROM mountain WHERE range != 'Aberdare Range'	mountain_photos
SELECT name ,  height ,  prominence FROM mountain WHERE range != 'Aberdare Range'	mountain_photos

SELECT id ,  name FROM mountain	mountain_photos
SELECT T1.id ,  T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id	mountain_photos
SELECT T1.id ,  T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id WHERE T1.height  >  4000	mountain_photos

SELECT id ,  name FROM mountain	mountain_photos
SELECT T1.id ,  T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id	mountain_photos
SELECT T1.id ,  T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id GROUP BY T1.id HAVING count(*)  >=  2	mountain_photos

SELECT camera_lens_id FROM photos	mountain_photos
SELECT camera_lens_id FROM photos GROUP BY camera_lens_id ORDER BY count(*) DESC LIMIT 1	mountain_photos
SELECT T2.name FROM photos AS T1 JOIN camera_lens AS T2 ON T1.camera_lens_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1	mountain_photos

SELECT camera_lens_id FROM photos	mountain_photos
SELECT * FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id  =  T1.id WHERE T1.brand  =  'Sigma' OR T1.brand  =  'Olympus'	mountain_photos
SELECT T2.name FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id  =  T1.id WHERE T1.brand  =  'Sigma' OR T1.brand  =  'Olympus'	mountain_photos

SELECT brand FROM camera_lens	mountain_photos
SELECT count(DISTINCT brand) FROM camera_lens	mountain_photos

SELECT camera_lens_id FROM photos	mountain_photos
SELECT * FROM camera_lens WHERE id NOT IN ( SELECT camera_lens_id FROM photos )	mountain_photos
SELECT count(*) FROM camera_lens WHERE id NOT IN ( SELECT camera_lens_id FROM photos )	mountain_photos

SELECT * FROM mountain WHERE country  =  'Ethiopia'	mountain_photos
SELECT T2.camera_lens_id FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id WHERE T1.country  =  'Ethiopia'	mountain_photos
SELECT count(DISTINCT T2.camera_lens_id) FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id WHERE T1.country  =  'Ethiopia'	mountain_photos

SELECT * FROM mountain WHERE range  =  'Toubkal Atlas'	mountain_photos
SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id  =  T3.id WHERE T1.range  =  'Toubkal Atlas'	mountain_photos
SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id  =  T3.id WHERE T1.range  =  'Toubkal Atlas' INTERSECT SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id  =  T3.id WHERE T1.range  =  'Lasta Massif'	mountain_photos

SELECT * FROM photos AS T2 JOIN camera_lens AS T3 ON T2.camera_lens_id  =  T3.id WHERE T3.brand  =  'Sigma'	mountain_photos
SELECT name ,  prominence FROM mountain EXCEPT SELECT T1.name ,  T1.prominence FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id  =  T3.id WHERE T3.brand  =  'Sigma'	mountain_photos

SELECT name FROM camera_lens	mountain_photos
SELECT name FROM camera_lens WHERE name LIKE "%Digital%"	mountain_photos

SELECT COUNT(*) FROM HOTELS WHERE star_rating_code  =  "5"	cre_Theme_park
SELECT COUNT(*) FROM HOTELS  WHERE star_rating_code  =  "5" AND pets_allowed_yn  =  1	cre_Theme_park
SELECT hotel_id FROM HOTELS  WHERE star_rating_code  =  "5" AND pets_allowed_yn  =  1 ORDER BY price_range DESC LIMIT 1	cre_Theme_park
SELECT avg(price_range) FROM HOTELS WHERE star_rating_code  =  "5" AND pets_allowed_yn  =  1	cre_Theme_park

SELECT Location_Name FROM LOCATIONS	cre_Theme_park
SELECT Location_Name FROM LOCATIONS WHERE Location_Name LIKE "%UK%"	cre_Theme_park
SELECT Location_Name FROM LOCATIONS WHERE Location_Name LIKE "%film%"	cre_Theme_park

SELECT COUNT(*) FROM TOURIST_ATTRACTIONS	cre_Theme_park
SELECT COUNT(*) FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  "bus" OR How_to_Get_There  =  "walk"	cre_Theme_park
SELECT Name ,  Opening_Hours FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  "bus" OR How_to_Get_There  =  "walk"	cre_Theme_park

SELECT COUNT(*) FROM HOTELS	cre_Theme_park
SELECT AVG(price_range) FROM HOTELS	cre_Theme_park
SELECT COUNT(*) FROM HOTELS WHERE price_range  >  10000	cre_Theme_park
SELECT T2.star_rating_description FROM HOTELS AS T1 JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.star_rating_code  =  T2.star_rating_code WHERE T1.price_range  >  10000	cre_Theme_park

SELECT COUNT(*) FROM TOURIST_ATTRACTIONS	cre_Theme_park
SELECT COUNT(*) FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T1.Name  =  "fun1"	cre_Theme_park
SELECT COUNT(*) FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T1.Name  =  "game1"	cre_Theme_park
SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T1.Name  =  "game1"	cre_Theme_park

SELECT How_to_Get_There FROM TOURIST_ATTRACTIONS WHERE Name  =  "film festival"	cre_Theme_park
SELECT COUNT(*) FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  "film festival"	cre_Theme_park
SELECT T1.Name ,  T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  "film festival"	cre_Theme_park

SELECT COUNT(*) FROM SHOPS	cre_Theme_park
SELECT COUNT(*) FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  "bus"	cre_Theme_park
SELECT COUNT(*) FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  "walk"	cre_Theme_park
SELECT T1.Shop_Details FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  "walk"	cre_Theme_park

SELECT Description FROM TOURIST_ATTRACTIONS WHERE Name  =  "US museum"	cre_Theme_park
SELECT How_to_Get_There FROM TOURIST_ATTRACTIONS WHERE Name  =  "US museum"	cre_Theme_park
SELECT T1.Name FROM STAFF AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  "US museum"	cre_Theme_park

SELECT COUNT(*) FROM Street_Markets	cre_Theme_park
SELECT COUNT(*) FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  "shuttle"	cre_Theme_park
SELECT COUNT(*) FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  "walk" OR  T2.How_to_Get_There  =  "bus"	cre_Theme_park
SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  "walk" OR  T2.How_to_Get_There  =  "bus"	cre_Theme_park

SELECT COUNT(*) FROM VISITORS	cre_Theme_park
SELECT Tourist_ID FROM VISITORS WHERE Tourist_Details  =  "Vincent"	cre_Theme_park
SELECT T2.Visit_Date ,  T2.Visit_Details FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.Tourist_ID  =  T2.Tourist_ID WHERE T1.Tourist_Details  =  "Vincent"	cre_Theme_park

SELECT Tourist_ID FROM VISITORS WHERE Tourist_Details  =  "Vivian"	cre_Theme_park
SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID  =  T3.Tourist_ID WHERE T3.Tourist_Details  =  "Vivian"	cre_Theme_park
SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID  =  T3.Tourist_ID WHERE T3.Tourist_Details  =  "Vincent"	cre_Theme_park

SELECT COUNT(*) FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  "Vincent"	cre_Theme_park
SELECT COUNT(*) FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  "Vivian"	cre_Theme_park
SELECT T1.Name ,  T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  "Vincent" OR T2.Tourist_Details  =  "Vivian"	cre_Theme_park

SELECT price_range FROM HOTELS ORDER BY price_range DESC LIMIT 1	cre_Theme_park
SELECT price_range FROM HOTELS ORDER BY price_range DESC LIMIT 3	cre_Theme_park
SELECT other_hotel_details FROM HOTELS ORDER BY price_range DESC LIMIT 3	cre_Theme_park

SELECT price_range FROM HOTELS ORDER BY price_range LIMIT 1	cre_Theme_park
SELECT price_range FROM HOTELS ORDER BY price_range LIMIT 3	cre_Theme_park
SELECT other_hotel_details ,  star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3	cre_Theme_park

SELECT count(*) FROM Tourist_Attractions WHERE How_to_Get_There = "walk"	cre_Theme_park
SELECT count(*) FROM Tourist_Attractions WHERE How_to_Get_There = "bus"	cre_Theme_park
SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1	cre_Theme_park

SELECT COUNT(*) FROM Ref_Attraction_Types	cre_Theme_park
SELECT Attraction_Type_Description FROM Ref_Attraction_Types WHERE Attraction_Type_Code = 2	cre_Theme_park
SELECT T2.Attraction_Type_Code, COUNT(*) FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code  =  T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code	cre_Theme_park
SELECT T1.Attraction_Type_Description ,  T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code  =  T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT(*) DESC LIMIT 1	cre_Theme_park

SELECT COUNT(*) FROM Tourist_Attractions	cre_Theme_park
SELECT T1.Name, COUNT(*) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID	cre_Theme_park
SELECT T1.Name ,  T2.Tourist_Attraction_ID ,   COUNT(*) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID	cre_Theme_park

SELECT COUNT(*) FROM (SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  >=  1)	cre_Theme_park
SELECT COUNT(*) FROM (SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  >=  2)	cre_Theme_park
SELECT T1.Name ,  T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  >=  2	cre_Theme_park

SELECT COUNT(*) FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  "660 Shea Crescent"	cre_Theme_park
SELECT COUNT(*) FROM Tourist_Attractions WHERE How_to_Get_There  =  "walk"	cre_Theme_park
SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  "660 Shea Crescent" OR T2.How_to_Get_There  =  "walk"	cre_Theme_park

SELECT COUNT(*) FROM Features	cre_Theme_park
SELECT Feature_Details FROM Features	cre_Theme_park
SELECT COUNT(*) FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park'	cre_Theme_park
SELECT COUNT(*) FROM (SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping')	cre_Theme_park
SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping'	cre_Theme_park

SELECT COUNT(*) FROM Tourist_Attractions WHERE How_to_Get_There = "bus"	cre_Theme_park
SELECT COUNT(*) FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  "254 Ottilie Junction" OR T2.How_to_Get_There  =  "bus"	cre_Theme_park
SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  "254 Ottilie Junction" OR T2.How_to_Get_There  =  "bus"	cre_Theme_park

SELECT COUNT(*) FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  "Alison"	cre_Theme_park
SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  "Alison"	cre_Theme_park
SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  "Rosalind"	cre_Theme_park
SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  "Alison" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  "Rosalind"	cre_Theme_park

SELECT * FROM publication	book_2
SELECT Publisher FROM publication	book_2
SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1	book_2

SELECT Price FROM publication WHERE Publisher = "Wiley"	book_2
SELECT Price FROM publication WHERE Publisher = "Pearson"	book_2
SELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3	book_2

SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Price  >  4000000	book_2
SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T2.Price  >  4000000	book_2

SELECT T2.Price FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T1.Title = "Cyberella"	book_2
SELECT T2.Price FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID	book_2
SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Price DESC	book_2

SELECT T2.Publisher FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T1.Title = "Bloody Mary : Lady Liberty"	book_2
SELECT COUNT(*) FROM publication WHERE Publisher = (SELECT T2.Publisher FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T1.Title = "Bloody Mary : Lady Liberty")	book_2
SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*)  >  1	book_2

SELECT T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T1.Title = "Dead Corps"	book_2
SELECT T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T1.Title = "Cyberella"	book_2
SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1	book_2

SELECT Writer FROM book WHERE Title = "Gemini Blood"	book_2
SELECT Title FROM book WHERE Writer = (SELECT Writer FROM book WHERE Title = "Gemini Blood")	book_2
SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*)  >  1	book_2

SELECT T2.Publisher FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T1.Title = "Bloody Mary : Lady Liberty"	book_2
SELECT T2.Publisher FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T1.Title = "Gemini Blood"	book_2
SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication)	book_2

SELECT Publisher FROM publication WHERE Price  >  10000000	book_2
SELECT Publisher FROM publication WHERE Price  <  5000000	book_2
SELECT Publisher FROM publication WHERE Price  >  10000000 INTERSECT SELECT Publisher FROM publication WHERE Price  <  5000000	book_2

SELECT Country_name, Official_native_language FROM country	match_season
SELECT count(*) FROM country WHERE Official_native_language LIKE "%English%"	match_season
SELECT Official_native_language FROM country WHERE Official_native_language LIKE "%English%"	match_season

SELECT * FROM match_season	match_season
SELECT position FROM match_season	match_season
SELECT count(distinct position) FROM match_season	match_season
SELECT DISTINCT POSITION FROM match_season WHERE College  =  "Virginia"	match_season
SELECT DISTINCT POSITION FROM match_season WHERE College  =  "UCLA" OR College  =  "Duke"	match_season

SELECT  T2.season, T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country	match_season
SELECT  count(distinct T1.Country_name) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country	match_season
SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  "Ireland"	match_season
SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  "Indonesia"	match_season

select country_name from country where capital = 'Baghdad'	match_season
select country_name from country where capital = 'Dublin'	match_season
SELECT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  "Dublin"	match_season
SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  "Dublin"	match_season

SELECT DISTINCT POSITION FROM match_season WHERE College  =  "Furman"	match_season
SELECT player FROM match_season WHERE College  =  "Maryland" OR College  =  "Duke"	match_season
SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  "Maryland" OR T2.College  =  "Duke"	match_season

SELECT T2.player,T1.country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  "Defender"	match_season
SELECT T2.player,T1.country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  "Defender" WHERE T2.Position  =  "Forward"	match_season
SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  "Defender"	match_season
SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  "Defender"	match_season

SELECT T1.player,T1.Position, T2.name FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id	match_season
SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id where t2.name = 'Evalyn Feil'	match_season
SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  "Ryley Goldner"	match_season

SELECT college,name FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id	match_season
SELECT count(DISTINCT College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  'Miami Fusion'	match_season
SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  "Columbus Crew"	match_season

SELECT player, years_played FROM player	match_season
SELECT T1.player, T1.years_played,T2.name FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  "Columbus Crew"	match_season
SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  "Brown Erdman"	match_season
SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  "Columbus Crew"	match_season

SELECT Country_name from country	match_season
SELECT T2.player, Country_name  FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name	match_season
SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name	match_season

SELECT POSITION, count(*) FROM match_season GROUP BY POSITION	match_season
SELECT POSITION FROM match_season GROUP BY POSITION order by count(*) ASC limit 1	match_season
SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count(*) DESC LIMIT 1	match_season

SELECT College, count(*) FROM match_season GROUP BY College	match_season
SELECT College FROM match_season GROUP BY College order by count(*) asc LIMIT 5	match_season
SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3	match_season

SELECT count(distinct College) FROM match_season	match_season
SELECT College FROM match_season GROUP BY College HAVING count(*) = 1	match_season
SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2	match_season

SELECT count(distinct College) FROM match_season	match_season
SELECT College FROM match_season GROUP BY College HAVING count(*) = 1	match_season
SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2	match_season
SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC	match_season

SELECT Name FROM team	match_season
SELECT Name FROM team WHERE Team_id IN (SELECT Team FROM match_season)	match_season
SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)	match_season

SELECT position FROM match_season	match_season
SELECT position, count(*) FROM match_season group by position	match_season
SELECT T2.position,T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country	match_season
SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  "Forward" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  "Defender"	match_season

SELECT minister FROM party	party_people
SELECT minister FROM party WHERE took_office  >=  1959 AND took_office  <=  1961	party_people
SELECT minister FROM party WHERE took_office  >  1961 OR took_office  <  1959	party_people

SELECT minister FROM party	party_people
SELECT minister, took_office FROM party	party_people
SELECT minister, left_office FROM party	party_people
SELECT minister FROM party ORDER BY left_office DESC LIMIT 1	party_people

SELECT party_name FROM party	party_people
SELECT * FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id	party_people
SELECT T2.party_name, count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id group by party_name	party_people

SELECT count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) ASC LIMIT 1	party_people
SELECT count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1	party_people
SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1	party_people

SELECT party_name FROM party	party_people
SELECT count(*) FROM party WHERE party_id NOT IN (SELECT party_id FROM Member)	party_people
SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM Member)	party_people

SELECT member_name FROM member	party_people
SELECT member_name FROM member WHERE party_id  =  1	party_people
SELECT member_name FROM member WHERE party_id  =  3	party_people
SELECT member_name FROM member WHERE party_id  =  3 INTERSECT SELECT member_name FROM member WHERE party_id  =  1	party_people

SELECT count(*) FROM member	party_people
SELECT count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id WHERE T2.Party_name = "Progress Party"	party_people
SELECT count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id WHERE T2.Party_name != "Progress Party"	party_people
SELECT T1.member_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id WHERE T2.Party_name != "Progress Party"	party_people

SELECT event_id, event_name FROM party_events	party_people
SELECT event_id, event_name, party_id FROM party_events	party_people
SELECT distinct T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id	party_people
SELECT T2.party_name,  count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id	party_people

SELECT * FROM party_events	party_people
SELECT * FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id	party_people
SELECT * FROM member EXCEPT SELECT * FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id	party_people
SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id	party_people

SELECT * FROM party except SELECT * FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id	party_people
SELECT distinct * FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id	party_people
SELECT * FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  2	party_people
SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  2	party_people

SELECT count(distinct member_in_charge_id) FROM party_events	party_people
SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id GROUP BY T2.member_in_charge_id	party_people
SELECT T1.member_name, count(*) FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id GROUP BY T2.member_in_charge_id	party_people
SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT 1	party_people

SELECT event_id, event_name, party_id FROM party_events	party_people
SELECT party_id, count(*) FROM party_events GROUP BY party_id	party_people
SELECT event_name, count(*) FROM party_events GROUP BY event_name	party_people
SELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  2	party_people

SELECT * FROM Rooms WHERE decor  =  'modern'	inn_1
SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern';	inn_1

SELECT * FROM Rooms WHERE basePrice  >  160	inn_1
SELECT * FROM Rooms WHERE basePrice  >  160 AND maxOccupancy  >  2;	inn_1
SELECT roomName ,  RoomId FROM Rooms WHERE basePrice  >  160 AND maxOccupancy  >  2;	inn_1

SELECT count(*) FROM Reservations GROUP BY Room	inn_1
SELECT * FROM Reservations GROUP BY Room ORDER BY count(*) DESC LIMIT 1	inn_1
SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;	inn_1

SELECT * FROM Reservations WHERE FirstName = "ROY" AND LastName  =  "SWEAZY";	inn_1
SELECT kids FROM Reservations WHERE FirstName = "ROY" AND LastName  =  "SWEAZY";	inn_1

SELECT * FROM Reservations WHERE FirstName = "ROY" AND LastName  =  "SWEAZY";	inn_1
SELECT count(*) FROM Reservations WHERE FirstName = "ROY" AND LastName  =  "SWEAZY";	inn_1

SELECT * FROM Reservations GROUP BY Room ORDER BY Rate DESC LIMIT 1;	inn_1
SELECT T2.roomName ,  T1.Rate ,  T1.CheckIn ,  T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1;	inn_1

SELECT * FROM Reservations WHERE FirstName  =  "CONRAD" AND LastName  =  "SELBIG";	inn_1
SELECT * FROM Reservations WHERE CheckIn  =  "2010-10-23" AND FirstName  =  "CONRAD" AND LastName  =  "SELBIG";	inn_1
SELECT Adults FROM Reservations WHERE CheckIn  =  "2010-10-23" AND FirstName  =  "CONRAD" AND LastName  =  "SELBIG";	inn_1

SELECT * FROM Reservations WHERE FirstName  =  "DAMIEN" AND LastName  =  "TRACHSEL";	inn_1
SELECT * FROM Reservations WHERE CheckIn  =  "2010-09-21" AND FirstName  =  "DAMIEN" AND LastName  =  "TRACHSEL";	inn_1
SELECT Kids FROM Reservations WHERE CheckIn  =  "2010-09-21" AND FirstName  =  "DAMIEN" AND LastName  =  "TRACHSEL";	inn_1

SELECT * FROM Rooms WHERE bedtype  =  'King';	inn_1
SELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';	inn_1

SELECT * FROM Rooms WHERE bedtype  =  'King'	inn_1
SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King'	inn_1
SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;	inn_1

SELECT basePrice FROM Rooms	inn_1
SELECT * FROM Rooms ORDER BY basePrice ASC	inn_1
SELECT roomName ,  basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1;	inn_1

SELECT * FROM Rooms WHERE roomName  =  "Recluse and defiance";	inn_1
SELECT decor FROM Rooms WHERE roomName  =  "Recluse and defiance";	inn_1

SELECT * FROM Rooms GROUP BY bedType;	inn_1
SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;	inn_1

SELECT maxOccupancy FROM Rooms WHERE decor  =  'modern';	inn_1
SELECT sum(maxOccupancy) FROM Rooms WHERE decor  =  'modern';	inn_1

SELECT decor FROM Rooms	inn_1
SELECT count(T2.decor) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T2.decor	inn_1
SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T2.decor ORDER BY count(T2.decor) ASC LIMIT 1;	inn_1

SELECT maxOccupancy FROM Rooms	inn_1
SELECT T1.Adults + T1.Kids FROM Reservations AS T1	inn_1
SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids;	inn_1

SELECT T1.Rate ,  T2.basePrice FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId	inn_1
SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate - T2.basePrice  >  0	inn_1
SELECT T1.firstname ,  T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate - T2.basePrice  >  0	inn_1

SELECT * FROM Rooms;	inn_1
SELECT count(*) FROM Rooms;	inn_1

SELECT * FROM Rooms WHERE bedtype  =  'King';	inn_1
SELECT count(*) FROM Rooms WHERE bedtype  =  'King';	inn_1

SELECT * FROM Rooms GROUP BY bedType;	inn_1
SELECT bedType ,  count(*) FROM Rooms GROUP BY bedType;	inn_1

SELECT * FROM Rooms ORDER BY maxOccupancy DESC	inn_1
SELECT * FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1;	inn_1
SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1;	inn_1

SELECT * FROM Rooms ORDER BY basePrice DESC	inn_1
SELECT * FROM Rooms ORDER BY basePrice DESC LIMIT 1;	inn_1
SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1;	inn_1

SELECT * FROM Rooms WHERE decor = "traditional";	inn_1
SELECT roomName ,  bedType FROM Rooms WHERE decor = "traditional";	inn_1

SELECT * FROM Rooms WHERE bedType = "King"	inn_1
SELECT * FROM Rooms WHERE bedType = "King" GROUP BY decor;	inn_1
SELECT decor ,  count(*) FROM Rooms WHERE bedType = "King" GROUP BY decor;	inn_1

SELECT avg(basePrice) FROM Rooms	inn_1
SELECT min(basePrice) FROM Rooms	inn_1
SELECT decor , avg(basePrice) ,  min(basePrice) FROM Rooms GROUP BY decor;	inn_1

SELECT * FROM Rooms ORDER BY basePrice;	inn_1
SELECT roomName FROM Rooms ORDER BY basePrice;	inn_1

SELECT * FROM Rooms WHERE basePrice  >  120	inn_1
SELECT count(*) FROM Rooms WHERE basePrice  >  120	inn_1
SELECT decor , count(*) FROM Rooms WHERE basePrice  >  120 GROUP BY decor;	inn_1

SELECT avg(basePrice) FROM Rooms	inn_1
SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;	inn_1

SELECT * FROM Rooms WHERE bedType  =  "King"	inn_1
SELECT * FROM Rooms WHERE bedType  =  "Queen";	inn_1
SELECT roomName FROM Rooms WHERE bedType  =  "King" OR bedType  =  "Queen";	inn_1

SELECT bedType FROM Rooms;	inn_1
SELECT count(DISTINCT bedType) FROM Rooms;	inn_1

SELECT * FROM Rooms ORDER BY basePrice DESC	inn_1
SELECT * FROM Rooms ORDER BY basePrice DESC LIMIT 3;	inn_1
SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;	inn_1

SELECT avg(basePrice) FROM Rooms	inn_1
SELECT * FROM Rooms WHERE basePrice  >  ( SELECT avg(basePrice) FROM Rooms );	inn_1
SELECT roomName FROM Rooms WHERE basePrice  >  ( SELECT avg(basePrice) FROM Rooms );	inn_1

SELECT DISTINCT room FROM reservations	inn_1
SELECT * FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)	inn_1
SELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)	inn_1

SELECT * FROM Reservations GROUP BY Room	inn_1
SELECT count(*) FROM Reservations GROUP BY Room	inn_1
SELECT T2.roomName ,  count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room	inn_1

SELECT count(*) FROM Reservations GROUP BY Room	inn_1
SELECT * FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room HAVING count(*)  >  60	inn_1
SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room HAVING count(*)  >  60	inn_1

SELECT * FROM rooms WHERE baseprice BETWEEN 120 AND 150	inn_1
SELECT roomname FROM rooms WHERE baseprice BETWEEN 120 AND 150	inn_1

SELECT * FROM Reservations WHERE firstname LIKE '%ROY%'	inn_1
SELECT * FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE '%ROY%'	inn_1
SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE '%ROY%'	inn_1

SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID	gymnast
SELECT T2.age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE Hometown = "Bonao"	gymnast
SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE Hometown = "Miami"	gymnast
SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T2.Hometown != "Santo Domingo"	gymnast

SELECT AVG(Height) FROM people	gymnast
SELECT AVG(T2.Height) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID	gymnast
SELECT Age FROM people ORDER BY Height DESC LIMIT 1	gymnast

SELECT name FROM people ORDER BY Height DESC LIMIT 1	gymnast
SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY Age DESC LIMIT 1	gymnast
SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY Age DESC LIMIT 5	gymnast
SELECT Name FROM People ORDER BY Age DESC LIMIT 5	gymnast

SELECT AVG(age) FROM people	gymnast
SELECT AVG(age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID	gymnast
SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1	gymnast
SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1	gymnast

SELECT AVG(Total_Points) FROM gymnast	gymnast
SELECT COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  50	gymnast
SELECT COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  57.5	gymnast
SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  57.5	gymnast

SELECT COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID	gymnast
SELECT T2.Age ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Age	gymnast
SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown	gymnast

SELECT COUNT(DISTINCT Hometown) FROM people	gymnast
SELECT T2.Hometown, COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown	gymnast
SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1	gymnast

SELECT COUNT(DISTINCT Hometown) FROM people	gymnast
SELECT T2.Hometown, COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown	gymnast
SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*)  >=  2	gymnast

SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1	gymnast
SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Height ASC LIMIT 1	gymnast
SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Height ASC	gymnast

SELECT AVG(Floor_Exercise_Points) FROM gymnast	gymnast
SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID	gymnast
SELECT Hometown FROM people	gymnast
SELECT DISTINCT Hometown FROM people EXCEPT SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID	gymnast

SELECT COUNT(*) FROM people WHERE Age  >  23	gymnast
SELECT COUNT(*) FROM people WHERE Age  < 20	gymnast
SELECT Hometown FROM people WHERE Age  < 20	gymnast
SELECT Hometown FROM people WHERE Age  >  23 INTERSECT SELECT Hometown FROM people WHERE Age  <  20	gymnast

SELECT Country FROM Market	film_rank
SELECT country, Number_cities FROM market	film_rank
SELECT max(Number_cities) ,  min(Number_cities) FROM market	film_rank

SELECT count(*) FROM film_market_estimation	film_rank
SELECT * FROM film_market_estimation WHERE year = 1995	film_rank
SELECT DISTINCT T1.Director FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID WHERE T2.Year  =  1995	film_rank

SELECT DISTINCT market_id FROM film_market_estimation	film_rank
SELECT market_id FROM film_market_estimation GROUP BY market_id HAVING max(Low_Estimate) > 10000	film_rank
SELECT avg(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T1.Low_Estimate  >  10000	film_rank

SELECT count(*) FROM film_market_estimation	film_rank
SELECT Year From film_market_estimation	film_rank
SELECT T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T2.Country  =  "Japan"	film_rank
SELECT T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T2.Country  =  "Japan" ORDER BY T1.Year DESC	film_rank

SELECT COUNT(*) FROM FILM	film_rank
SELECT distinct Studio FROM FILM	film_rank
SELECT Studio, COUNT(*) FROM film GROUP BY Studio	film_rank
SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT(*) DESC LIMIT 1	film_rank

SELECT COUNT(*) FROM FILM	film_rank
SELECT distinct Studio FROM FILM	film_rank
SELECT Studio, COUNT(*) FROM film GROUP BY Studio	film_rank
SELECT Studio FROM film GROUP BY Studio HAVING COUNT(*)  >=  2	film_rank

SELECT count(*) FROM film_market_estimation	film_rank
SELECT distinct film_id FROM film_market_estimation	film_rank
SELECT Title FROM film WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation)	film_rank

SELECT distinct Studio FROM FILM	film_rank
SELECT DISTINCT Director FROM film	film_rank
SELECT Studio FROM film WHERE Director  =  "Nicholas Meyer"	film_rank
SELECT Studio FROM film WHERE Director  =  "Nicholas Meyer" INTERSECT SELECT Studio FROM film WHERE Director  =  "Walter Hill"	film_rank

SELECT distinct Studio FROM FILM	film_rank
SELECT distinct Studio FROM FILM WHERE Studio LIKE "%Universal%"	film_rank
SELECT title ,  Studio FROM film WHERE Studio LIKE "%Universal%"	film_rank

SELECT Director FROM film	film_rank
SELECT Studio FROM film WHERE Director  =  "Walter Hill"	film_rank
SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director  =  "Walter Hill"	film_rank

SELECT distinct Studio FROM FILM	film_rank
SELECT Studio, max(Gross_in_dollar) FROM FILM GROUP BY studio	film_rank
SELECT Studio, min(Gross_in_dollar) FROM FILM GROUP BY studio	film_rank
SELECT Studio FROM film GROUP BY Studio HAVING avg(Gross_in_dollar)  >=  4500000	film_rank

SELECT distinct T1.title FROM film AS T1 JOIN film_market_estimation AS T2  ON T1.Film_ID  =  T2.Film_ID	film_rank
SELECT t1.title, t2.high_estimate FROM film AS T1 JOIN film_market_estimation AS T2  ON T1.Film_ID  =  T2.Film_ID	film_rank
SELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2  ON T1.Film_ID  =  T2.Film_ID ORDER BY high_estimate DESC LIMIT 1	film_rank

SELECT count(*) FROM STUDENT WHERE Major  =  600	voter_2
SELECT max(Age) FROM STUDENT WHERE Major  =  600	voter_2
SELECT max(Age) ,  min(Age) FROM STUDENT WHERE Major  =  600	voter_2

SELECT count(DISTINCT T1.StuID) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Secretary_Vote	voter_2
SELECT count(DISTINCT T1.StuID) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Secretary_Vote WHERE T2.Election_Cycle  =  "Fall"	voter_2
SELECT DISTINCT T1.Fname, T1.Lname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Secretary_Vote WHERE T2.Election_Cycle  =  "Fall"	voter_2
SELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Secretary_Vote WHERE T2.Election_Cycle  =  "Fall"	voter_2

SELECT count(DISTINCT T1.StuID) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote	voter_2
SELECT count(DISTINCT T1.StuID) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote WHERE T2.Election_Cycle  =  "Spring"	voter_2
SELECT DISTINCT T1.Fname, T1.Lname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote WHERE T2.Election_Cycle  =  "Spring"	voter_2
SELECT DISTINCT T1.Advisor FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote WHERE T2.Election_Cycle  =  "Spring"	voter_2

SELECT count(DISTINCT T1.StuID) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.President_Vote	voter_2
SELECT count(DISTINCT T1.StuID) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.President_Vote WHERE T1.sex  =  "F"	voter_2
SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.President_VOTE WHERE T1.sex  =  "F"	voter_2

SELECT count(DISTINCT T1.StuID) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Vice_President_Vote	voter_2
SELECT DISTINCT T1.Fname, T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Vice_President_Vote	voter_2
SELECT count(DISTINCT T1.StuID) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Vice_President_Vote WHERE T1.age = 18	voter_2
SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18	voter_2

SELECT count(DISTINCT T1.StuID) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote	voter_2
SELECT count(DISTINCT T1.StuID) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T2.Election_Cycle  =  "Fall"	voter_2
SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.Sex  =  "M" AND T2.Election_Cycle  =  "Fall"	voter_2

SELECT count(*) FROM STUDENT WHERE city_code  =  "NYC"	voter_2
SELECT FName, LName FROM STUDENT WHERE city_code  =  "NYC"	voter_2
SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.city_code  =  "NYC"	voter_2
SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.city_code  =  "NYC" AND T2.Election_Cycle  =  "Spring"	voter_2

SELECT count(*) FROM STUDENT WHERE city_code  =  "NYC"	voter_2
SELECT count(DISTINCT T1.StuID) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.city_code  =  "NYC"	voter_2
SELECT DISTINCT T1.FName, T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.city_code  =  "NYC" AND T2.Election_Cycle  =  "Spring"	voter_2
SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.city_code  =  "NYC" AND T2.Election_Cycle  =  "Spring"	voter_2

SELECT count(*) FROM STUDENT WHERE Sex  =  "F"	voter_2
SELECT count(DISTINCT T1.StuID) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.sex  =  "F"	voter_2
SELECT count(DISTINCT T1.StuID) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.sex  =  "F" AND T2.Election_cycle = "Spring"	voter_2
SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.Sex  =  "F" AND T2.Election_Cycle  =  "Spring"	voter_2

SELECT count(DISTINCT T1.StuID) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  VICE_PRESIDENT_Vote	voter_2
SELECT count(DISTINCT T1.StuID) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  VICE_PRESIDENT_Vote WHERE city_code != "PIT"	voter_2
SELECT DISTINCT T1.Fname, T1.Lname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_PRESIDENT_Vote EXCEPT SELECT DISTINCT Fname, Lname FROM STUDENT WHERE city_code  =  "PIT"	voter_2
SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_PRESIDENT_Vote EXCEPT SELECT DISTINCT Fname FROM STUDENT WHERE city_code  =  "PIT"	voter_2

SELECT DISTINCT T1.Fname, T1.Lname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.PRESIDENT_Vote	voter_2
SELECT count(DISTINCT T1.StuID) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.PRESIDENT_Vote WHERE T1.Advisor != "2192"	voter_2
SELECT DISTINCT T1.FName, T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote EXCEPT SELECT DISTINCT FName, LName FROM STUDENT WHERE Advisor  =  "2192"	voter_2
SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote EXCEPT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  "2192"	voter_2

SELECT count(DISTINCT T1.StuID) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.PRESIDENT_Vote	voter_2
SELECT count(DISTINCT T1.StuID) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.PRESIDENT_Vote WHERE T1.Advisor = "8741"	voter_2
SELECT DISTINCT T1.Fname, T1.Lname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.PRESIDENT_Vote WHERE T1.Advisor = "8741"	voter_2
SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote INTERSECT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  "8741"	voter_2

SELECT DISTINCT Advisor FROM STUDENT	voter_2
SELECT count(*) FROM (SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING COUNT(*)  <=  2)	voter_2
SELECT count(*) FROM (SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING COUNT(*)  >  2)	voter_2
SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING COUNT(*)  >  2	voter_2

SELECT DISTINCT Major FROM STUDENT	voter_2
SELECT count(*) FROM (SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*)  >=  3)	voter_2
SELECT count(*) FROM (SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*)  <  3)	voter_2
SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*)  <  3	voter_2

SELECT DISTINCT Major FROM STUDENT	voter_2
SELECT Major, count(*) FROM STUDENT GROUP BY Major	voter_2
SELECT Major, count(*) FROM STUDENT GROUP BY Major ORDER BY count(*) DESC	voter_2
SELECT Major FROM STUDENT GROUP BY major ORDER BY count(*) DESC LIMIT 1	voter_2

SELECT DISTINCT Major FROM STUDENT WHERE Sex = "F"	voter_2
SELECT DISTINCT Major FROM STUDENT WHERE Sex = "F" GROUP BY major ORDER BY count(*) DESC	voter_2
SELECT Major FROM STUDENT WHERE Sex  =  "F" GROUP BY major ORDER BY count(*) DESC LIMIT 1	voter_2

SELECT city_code, count(*) FROM STUDENT GROUP BY city_code	voter_2
SELECT city_code FROM STUDENT GROUP BY city_code ORDER BY count(*) DESC	voter_2
SELECT count(*) FROM STUDENT GROUP BY city_code ORDER BY count(*) DESC LIMIT 1	voter_2
SELECT city_code FROM STUDENT GROUP BY city_code ORDER BY count(*) DESC LIMIT 1	voter_2

SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Asset_Parts AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  =  2	assets_maintenance
SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Fault_Log AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  <  2	assets_maintenance
SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Asset_Parts AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  =  2 INTERSECT SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Fault_Log AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  <  2	assets_maintenance

SELECT * FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id  =  T2.maintenance_contract_id GROUP BY T1.maintenance_contract_id	assets_maintenance
SELECT count(*) ,  T1.maintenance_contract_id FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id  =  T2.maintenance_contract_id GROUP BY T1.maintenance_contract_id	assets_maintenance

SELECT * FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id  =  T2.supplier_company_id GROUP BY T1.company_id	assets_maintenance
SELECT count(*) ,  T1.company_id FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id  =  T2.supplier_company_id GROUP BY T1.company_id	assets_maintenance

SELECT T1.company_id ,  T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Engineers AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id HAVING count(*)  >=  2	assets_maintenance
SELECT T1.company_id ,  T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Engineers AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id HAVING count(*)  >=  2 UNION SELECT T3.company_id ,  T3.company_name FROM Third_Party_Companies AS T3 JOIN Maintenance_Contracts AS T4 ON T3.company_id  =  T4.maintenance_contract_company_id GROUP BY T3.company_id HAVING count(*)  >=  2	assets_maintenance

SELECT T1.staff_name ,  T1.staff_id FROM Staff AS T1 JOIN Fault_Log AS T2 ON T1.staff_id  =  T2.recorded_by_staff_id	assets_maintenance
SELECT T1.staff_name ,  T1.staff_id FROM Staff AS T1 JOIN Fault_Log AS T2 ON T1.staff_id  =  T2.recorded_by_staff_id EXCEPT SELECT T3.staff_name ,  T3.staff_id FROM Staff AS T3 JOIN Engineer_Visits AS T4 ON T3.staff_id  =  T4.contact_staff_id	assets_maintenance

SELECT T1.engineer_id ,  T1.first_name ,  T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 GROUP BY T1.engineer_id ORDER BY count(*) ASC LIMIT 1	assets_maintenance
SELECT T1.engineer_id ,  T1.first_name ,  T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 GROUP BY T1.engineer_id ORDER BY count(*) DESC LIMIT 1	assets_maintenance

SELECT T1.part_name ,  T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_id HAVING count(*)  <  2	assets_maintenance
SELECT T1.part_name ,  T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_id HAVING count(*)  >  2	assets_maintenance

SELECT T1.first_name ,  T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id  =  T2.engineer_id	assets_maintenance
SELECT T1.first_name ,  T1.last_name ,  T1.other_details ,  T3.skill_description FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id  =  T2.engineer_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id	assets_maintenance

SELECT fault_short_name FROM Part_Faults	assets_maintenance
SELECT T1.fault_short_name ,  T3.skill_description FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id  =  T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id	assets_maintenance

SELECT T1.part_name ,  T3.asset_details FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id  =  T2.part_id JOIN assets AS T3 ON T2.asset_id = T3.asset_id GROUP BY T1.part_name	assets_maintenance
SELECT T1.part_name ,  count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name	assets_maintenance

SELECT count(*) ,  T1.fault_log_entry_id FROM Fault_Log AS T1 JOIN Engineer_Visits AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) ASC LIMIT 1	assets_maintenance
SELECT count(*) ,  T1.fault_log_entry_id FROM Fault_Log AS T1 JOIN Engineer_Visits AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1	assets_maintenance

SELECT count(*) FROM Maintenance_Engineers WHERE engineer_id NOT IN (SELECT engineer_id FROM Engineer_Visits)	assets_maintenance
SELECT first_name ,  last_name FROM Maintenance_Engineers WHERE engineer_id NOT IN (SELECT engineer_id FROM Engineer_Visits)	assets_maintenance

SELECT asset_acquired_date FROM Assets ORDER BY asset_acquired_date DESC LIMIT 1	assets_maintenance
SELECT asset_acquired_date FROM Assets ORDER BY asset_acquired_date ASC LIMIT 1	assets_maintenance

SELECT T1.part_id ,  T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id JOIN Skills_Required_To_Fix AS T3 ON T2.part_fault_id  =  T3.part_fault_id GROUP BY T1.part_id ORDER BY count(*) ASC LIMIT 1	assets_maintenance
SELECT T1.part_id ,  T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id JOIN Skills_Required_To_Fix AS T3 ON T2.part_fault_id  =  T3.part_fault_id GROUP BY T1.part_id ORDER BY count(*) DESC LIMIT 1	assets_maintenance

SELECT T1.part_name, count(*) FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name	assets_maintenance
SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name ORDER BY count(*) ASC LIMIT 1	assets_maintenance

SELECT * FROM Maintenance_Engineers	assets_maintenance
SELECT T1.engineer_id ,  T1.first_name ,  T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 ON T1.engineer_id  =  T2.engineer_id GROUP BY T1.engineer_id	assets_maintenance
SELECT T1.engineer_id ,  T1.first_name ,  T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 ON T1.engineer_id  =  T2.engineer_id GROUP BY T1.engineer_id ORDER BY count(*) ASC LIMIT 1	assets_maintenance

SELECT staff_name FROM Staff	assets_maintenance
SELECT T1.staff_name ,  T3.first_name ,  T3.last_name FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id  =  T3.engineer_id	assets_maintenance

SELECT T1.fault_log_entry_id ,  T1.fault_description ,  T1.fault_log_entry_datetime FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) ASC LIMIT 1	assets_maintenance
SELECT T1.fault_log_entry_id ,  T1.fault_description ,  T1.fault_log_entry_datetime FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1	assets_maintenance

SELECT skill_id, skill_description FROM Skills	assets_maintenance
SELECT T1.skill_id ,  T1.skill_description, count(*) FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id  =  T2.skill_id GROUP BY T1.skill_id ORDER BY count(*) DESC LIMIT 1	assets_maintenance
SELECT T1.skill_id ,  T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id  =  T2.skill_id GROUP BY T1.skill_id ORDER BY count(*) DESC LIMIT 1	assets_maintenance

SELECT chargeable_amount FROM Parts	assets_maintenance
SELECT chargeable_amount FROM Parts ORDER BY chargeable_amount ASC	assets_maintenance
SELECT part_id ,  chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT 1	assets_maintenance

SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id ORDER BY T2.contract_start_date ASC LIMIT 5	assets_maintenance
SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id ORDER BY T2.contract_start_date ASC LIMIT 1	assets_maintenance

SELECT gender FROM staff	assets_maintenance
SELECT gender FROM staff GROUP BY gender ORDER BY count(*) DESC LIMIT 1	assets_maintenance

SELECT T1.staff_name ,  T3.first_name FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id GROUP BY T1.staff_name	assets_maintenance
SELECT T1.staff_name ,  count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id GROUP BY T1.staff_name	assets_maintenance

SELECT Amount_Settled FROM Claims WHERE Claim_ID = 143	insurance_policies
SELECT COUNT(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_ID  =  T2.Claim_ID WHERE T1.Claim_ID = 143	insurance_policies
SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.Claim_id HAVING count(*)  >  2 UNION SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id WHERE T1.Amount_Claimed  =  ( SELECT max(Amount_Claimed) FROM Claims )	insurance_policies

SELECT T3.Claim_ID FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id JOIN Claims AS T3 ON T2.policy_id  =  T3.policy_id WHERE T1.customer_details = "Ellsworth Paucek"	insurance_policies
SELECT COUNT(*) FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id WHERE T1.customer_details = "Ellsworth Paucek"	insurance_policies
SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 EXCEPT SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id JOIN Claims AS T3 ON T2.policy_id  =  T3.policy_id	insurance_policies

SELECT Date_Claim_Settled FROM Claims WHERE Claim_ID = 571	insurance_policies
SELECT Amount_Settled FROM Claims WHERE Claim_ID = 571	insurance_policies
SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Claimed DESC LIMIT 1	insurance_policies

SELECT T3.Claim_ID FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id JOIN Claims AS T3 ON T2.policy_id  =  T3.policy_id WHERE T1.customer_details = "Dr. Diana Rathk"	insurance_policies
SELECT T3.Amount_Claimed FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id JOIN Claims AS T3 ON T2.policy_id  =  T3.policy_id WHERE T1.customer_details = "Dr. Diana Rathk"	insurance_policies
SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1	insurance_policies

SELECT Claim_ID FROM Claims ORDER BY Amount_Settled ASC LIMIT 1	insurance_policies
SELECT Claim_ID FROM Claims ORDER BY Amount_Settled DESC LIMIT 1	insurance_policies
SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Claims WHERE Amount_Claimed  >  ( SELECT avg(Amount_Claimed) FROM Claims )	insurance_policies

SELECT Amount_Claimed FROM Claims WHERE Claim_ID = 563	insurance_policies
SELECT Amount_Claimed FROM Claims WHERE Claim_ID = 621	insurance_policies
SELECT Date_Claim_Made FROM Claims WHERE Amount_Settled  <=  ( SELECT avg(Amount_Settled) FROM Claims )	insurance_policies

SELECT Amount_Claimed FROM Claims WHERE Claim_ID = 621	insurance_policies
SELECT T2.Amount_Claimed FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_ID  =  T2.Claim_ID WHERE T1.Claim_ID = 621	insurance_policies
SELECT T1.Claim_id ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id	insurance_policies

SELECT COUNT(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_ID  =  T2.Claim_ID WHERE T1.Claim_ID = 957	insurance_policies
SELECT T2.Amount_Claimed FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_ID  =  T2.Claim_ID WHERE T1.Claim_ID = 957	insurance_policies
SELECT T1.claim_id ,  T1.date_claim_made ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY count(*) DESC LIMIT 1	insurance_policies

SELECT Amount_Settled FROM Settlements WHERE Settlement_ID = 564	insurance_policies
SELECT Date_Claim_Made FROM Settlements WHERE Settlement_ID = 564	insurance_policies
SELECT count(*) ,  T1.claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY T1.Date_Claim_Settled DESC LIMIT 1	insurance_policies

SELECT Claim_ID FROM Claims ORDER BY Amount_Settled ASC LIMIT 1	insurance_policies
SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made DESC LIMIT 1	insurance_policies
SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1	insurance_policies

SELECT T2.Policy_Type_Code FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.Customer_id WHERE Customer_Details = "Augustine Kerluke"	insurance_policies
SELECT COUNT(T2.Policy_Type_Code) FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.Customer_id WHERE Customer_Details = "Augustine Kerluke"	insurance_policies
SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.Customer_id GROUP BY T1.customer_id HAVING count(*)  >  1	insurance_policies

SELECT Payment_Method_Code FROM Payments ORDER BY Date_Payment_Made DESC LIMIT 1	insurance_policies
SELECT Amount_Payment FROM Payments ORDER BY Date_Payment_Made DESC LIMIT 1	insurance_policies
SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) DESC LIMIT 1	insurance_policies

SELECT COUNT(*) FROM Payments WHERE Payment_Method_Code = "MasterCard"	insurance_policies
SELECT COUNT(*) FROM Payments WHERE Payment_Method_Code = "Discover Card"	insurance_policies
SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) ASC LIMIT 1	insurance_policies

SELECT T2.Policy_Type_Code FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.Customer_id WHERE Customer_Details = "Augustine Kerluke"	insurance_policies
SELECT COUNT(T2.Policy_Type_Code) FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.Customer_id WHERE Customer_Details = "Augustine Kerluke"	insurance_policies
SELECT Policy_Type_Code FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY count(*) DESC LIMIT 1	insurance_policies

SELECT * FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.Customer_id WHERE Customer_Details = "Selena Gerhold"	insurance_policies
SELECT * FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.Customer_id WHERE Customer_Details = "Sydnie Friesen"	insurance_policies
SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.customer_id  =  T2.customer_id	insurance_policies

SELECT course_name FROM courses	student_assessment
SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) ASC LIMIT 1	student_assessment
SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1	student_assessment

SELECT course_id FROM student_course_registrations	student_assessment
SELECT student_id FROM student_course_registrations	student_assessment
SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1	student_assessment

SELECT student_id, student_details FROM students	student_assessment
SELECT student_id, student_details FROM students WHERE student_id IN (SELECT student_id FROM student_course_attendance)	student_assessment
SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)	student_assessment

SELECT course_id FROM student_course_registrations ORDER BY registration_date DESC LIMIT 1	student_assessment
SELECT student_id FROM student_course_registrations ORDER BY registration_date DESC LIMIT 1	student_assessment
SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1	student_assessment

SELECT student_id FROM student_course_attendance WHERE course_id = 301	student_assessment
SELECT count(*) FROM student_course_attendance WHERE course_id = 301	student_assessment
SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = "English"	student_assessment

SELECT date_of_attendance FROM student_course_attendance WHERE student_id = 141	student_assessment
SELECT date_of_attendance FROM student_course_attendance WHERE student_id = 171	student_assessment
SELECT course_name FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171	student_assessment
SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171	student_assessment

SELECT first_name FROM people WHERE login_name = "mkou"	student_assessment
SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.login_name = "mkou"	student_assessment
SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = "stanley.monahan@example.org"	student_assessment

SELECT assessment_date FROM candidate_assessments ORDER BY assessment_date ASC LIMIT 1	student_assessment
SELECT assessment_date FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1	student_assessment
SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1	student_assessment

SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) ASC LIMIT 1	student_assessment
SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) DESC LIMIT 1	student_assessment
SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1	student_assessment

SELECT count(*) FROM student_course_registrations GROUP BY course_id	student_assessment
SELECT count(*) FROM student_course_registrations GROUP BY student_id	student_assessment
SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id	student_assessment

SELECT count(DISTINCT student_id) FROM student_course_registrations	student_assessment
SELECT count(*) FROM student_course_registrations GROUP BY course_id	student_assessment
SELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id	student_assessment

SELECT qualification FROM candidate_assessments WHERE asessment_outcome_code = "Pass"	student_assessment
SELECT T1.candidate_details FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id WHERE T2.asessment_outcome_code = "Pass"	student_assessment
SELECT T1.candidate_details FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id WHERE T2.asessment_outcome_code = "Fail"	student_assessment
SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = "Fail"	student_assessment

SELECT course_id FROM student_course_attendance ORDER BY date_of_attendance DESC LIMIT 1	student_assessment
SELECT course_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1	student_assessment
SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1	student_assessment

SELECT DISTINCT address_id FROM people_addresses	student_assessment
SELECT DISTINCT T1.address_id FROM people_addresses AS T1 JOIN students AS T2 ON T1.person_id = T2.student_id	student_assessment
SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id	student_assessment

SELECT student_id FROM student_course_registrations	student_assessment
SELECT student_id FROM student_course_registrations INTERSECT SELECT student_id FROM student_course_attendance	student_assessment
SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance	student_assessment

SELECT course_id FROM student_course_registrations WHERE student_id = 171	student_assessment
SELECT course_id FROM student_course_registrations WHERE student_id = 121	student_assessment
SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121	student_assessment

SELECT count(*) FROM student_course_registrations	student_assessment
SELECT count(*) FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance WHERE course_id = 301)	student_assessment
SELECT count(*) FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)	student_assessment
SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)	student_assessment

SELECT registration_date FROM student_course_registrations WHERE course_id = 305	student_assessment
SELECT T2.registration_date FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = "statistics"	student_assessment
SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = "statistics" ORDER BY T2.registration_date	student_assessment

SELECT T2.title FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id JOIN actor AS T3 ON T1.actor_id = T3.actor_id WHERE T3.first_name = "NICK"	sakila_1
SELECT COUNT(T2.title) FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id JOIN actor AS T3 ON T1.actor_id = T3.actor_id WHERE T3.first_name = "NICK"	sakila_1
SELECT first_name FROM actor GROUP BY first_name ORDER BY count(*) DESC LIMIT 1	sakila_1

SELECT last_name FROM actor WHERE first_name = "ED"	sakila_1
SELECT last_name FROM actor WHERE first_name = "GRACE"	sakila_1
SELECT first_name ,  last_name FROM actor GROUP BY first_name ,  last_name ORDER BY count(*) DESC LIMIT 1	sakila_1

SELECT T2.city FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id WHERE T1.address = "47 MySakila Drive"	sakila_1
SELECT district FROM address WHERE address = "47 MySakila Drive"	sakila_1
SELECT district FROM address GROUP BY district HAVING count(*)  >=  2	sakila_1

SELECT district FROM address WHERE address = "1913 Hanoi Way"	sakila_1
SELECT T2.city FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id WHERE T1.address = "1913 Hanoi Way"	sakila_1
SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1	sakila_1

SELECT T3.first_name FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id JOIN actor AS T3 ON T1.actor_id = T3.actor_id WHERE T2.title = "ACE GOLDFINGER"	sakila_1
SELECT rental_rate FROM film WHERE title = "ACE GOLDFINGER"	sakila_1
SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3	sakila_1

SELECT T2.city FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id WHERE T1.address = "1913 Hanoi Way"	sakila_1
SELECT T3.country FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id JOIN country AS T3 ON T2.country_id  =  T3.country_id WHERE T1.address = "1913 Hanoi Way"	sakila_1
SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'	sakila_1

SELECT T1.phone FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id WHERE T2.city = "Acua"	sakila_1
SELECT T1.phone FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id WHERE T2.city = "Bag"	sakila_1
SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id GROUP BY T2.country_id HAVING count(*)  >=  3	sakila_1

SELECT amount FROM payment WHERE payment_id = 4	sakila_1
SELECT payment_date FROM payment WHERE payment_id = 4	sakila_1
SELECT payment_date FROM payment WHERE amount  >  10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.first_name  =  'Elsa'	sakila_1

SELECT T2.title FROM film_category AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN category AS T3 on T1.category_id = T3.category_id WHERE T2.title = "ADAPTATION HOLES"	sakila_1
SELECT rental_rate FROM film WHERE title = "ADAPTATION HOLES"	sakila_1
SELECT title ,  rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1	sakila_1

SELECT T2.title FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id JOIN actor AS T3 ON T1.actor_id = T3.actor_id WHERE T3.first_name = "BETTE"	sakila_1
SELECT T2.title FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id JOIN actor AS T3 ON T1.actor_id = T3.actor_id WHERE T3.first_name = "JOE"	sakila_1
SELECT T2.title ,  T2.film_id ,  T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1	sakila_1

SELECT description FROM film WHERE title = "AIRPORT POLLOCK"	sakila_1
SELECT T3.first_name, T3.last_name FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id JOIN actor AS T3 ON T1.actor_id = T3.actor_id WHERE T2.title = "ACE GOLDFINGER"	sakila_1
SELECT T2.first_name ,  T2.last_name ,  T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id ORDER BY count(*) DESC LIMIT 1	sakila_1

SELECT release_year FROM film WHERE title = "ALI FOREVER"	sakila_1
SELECT T3.first_name, T3.last_name FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id JOIN actor AS T3 ON T1.actor_id = T3.actor_id WHERE T2.title = "ALI FOREVER"	sakila_1
SELECT T2.first_name ,  T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id HAVING count(*)  >  30	sakila_1

SELECT COUNT(*) FROM inventory AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id WHERE T2.title = "ALI FOREVER"	sakila_1
SELECT title FROM inventory AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1	sakila_1
SELECT store_id FROM inventory GROUP BY store_id ORDER BY count(*) DESC LIMIT 1	sakila_1

SELECT email FROM customer WHERE first_name = "PATRICIA"	sakila_1
SELECT * FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id WHERE T1.first_name = "PATRICIA"	sakila_1
SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1	sakila_1

SELECT T3.first_name, T3.last_name FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id JOIN actor AS T3 ON T1.actor_id = T3.actor_id WHERE T2.title = "ALONE TRIP"	sakila_1
SELECT T3.first_name, T3.last_name FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id JOIN actor AS T3 ON T1.actor_id = T3.actor_id WHERE T2.title = "HUNGER ROOF"	sakila_1
SELECT T1.name FROM category AS T1 JOIN film_category AS T2 ON T1.category_id  =  T2.category_id JOIN film AS T3 ON T2.film_id  =  T3.film_id WHERE T3.title  =  'HUNGER ROOF'	sakila_1

SELECT special_features FROM film WHERE title = "ACADEMY DINOSAUR"	sakila_1
SELECT T1.name FROM category AS T1 JOIN film_category AS T2 ON T1.category_id  =  T2.category_id JOIN film AS T3 ON T2.film_id  =  T3.film_id WHERE T3.title  =  'ACADEMY DINOSAUR'	sakila_1
SELECT T2.name ,  T1.category_id ,  count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id  =  T2.category_id GROUP BY T1.category_id	sakila_1

SELECT rating FROM film WHERE title = "AGENT TRUMAN"	sakila_1
SELECT COUNT(*) FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id WHERE T1.title = "AGENT TRUMAN"	sakila_1
SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1	sakila_1

SELECT rental_rate FROM film WHERE title = "ALAMO VIDEOTAPE"	sakila_1
SELECT COUNT(*) FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id JOIN rental AS T3 ON T2.inventory_id  =  T3.inventory_id GROUP BY T2.inventory_id WHERE T1.title = "ALAMO VIDEOTAPE"	sakila_1
SELECT T1.title ,  T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id JOIN rental AS T3 ON T2.inventory_id  =  T3.inventory_id GROUP BY T2.inventory_id ORDER BY count(*) DESC LIMIT 1	sakila_1

SELECT COUNT(*) FROM inventory WHERE store_id = 2	sakila_1
SELECT COUNT(*) FROM inventory WHERE store_id = 1	sakila_1
SELECT T2.address FROM store AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE store_id  =  1	sakila_1

SELECT payment_date FROM payment WHERE payment_id = 3	sakila_1
SELECT T1.first_name ,  T1.last_name FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.payment_id = 3	sakila_1
SELECT T1.first_name ,  T1.last_name ,  T1.staff_id FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T1.staff_id ORDER BY count(*) ASC LIMIT 1	sakila_1

SELECT length FROM film WHERE title  =  'AIRPORT POLLOCK'	sakila_1
SELECT rental_duration FROM film WHERE title  =  'AIRPORT POLLOCK'	sakila_1
SELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id  =  T2.language_id WHERE T1.title  =  'AIRPORT POLLOCK'	sakila_1

SELECT T2.title FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id JOIN actor AS T3 ON T1.actor_id = T3.actor_id WHERE T3.first_name = "ZERO"	sakila_1
SELECT T2.special_features FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id JOIN actor AS T3 ON T1.actor_id = T3.actor_id WHERE T3.first_name = "ZERO"	sakila_1
SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'	sakila_1

SELECT * FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id WHERE T1.first_name = "LINDA"	sakila_1
SELECT T2.payment_date FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id WHERE T1.first_name = "LINDA"	sakila_1
SELECT payment_date FROM payment ORDER BY payment_date ASC LIMIT 1	sakila_1

SELECT COUNT(*) FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id WHERE T1.first_name = "LINDA"	sakila_1
SELECT * FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id WHERE T1.first_name = "LINDA" ORDER BY T2.amount DESC LIMIT 1	sakila_1
SELECT T2.address ,  T1.email FROM customer AS T1 JOIN address AS T2 ON T2.address_id  =  T1.address_id WHERE T1.first_name  =  'LINDA'	sakila_1

SELECT release_year FROM film WHERE title = "ACE GOLDFINGER"	sakila_1
SELECT rating FROM film WHERE title = "ACE GOLDFINGER"	sakila_1
SELECT title FROM film WHERE LENGTH  >  100 OR rating  =  'PG' EXCEPT SELECT title FROM film WHERE replacement_cost  >  200	sakila_1

SELECT email FROM customer WHERE first_name = "MARIA"	sakila_1
SELECT * FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.first_name = "MARIA"	sakila_1
SELECT T1.first_name ,  T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id  =  T2.customer_id ORDER BY T2.rental_date ASC LIMIT 1	sakila_1

SELECT T1.first_name, T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.rental_id = 2	sakila_1
SELECT return_date FROM rental WHERE rental_id = 2	sakila_1
SELECT DISTINCT T1.first_name ,  T1.last_name FROM staff AS T1 JOIN rental AS T2 ON T1.staff_id  =  T2.staff_id JOIN customer AS T3 ON T2.customer_id  =  T3.customer_id WHERE T3.first_name  =  'APRIL' AND T3.last_name  =  'BURNS'	sakila_1

SELECT * FROM store	sakila_1
SELECT COUNT(*) FROM inventory WHERE store_id = 3	sakila_1
SELECT store_id FROM customer GROUP BY store_id ORDER BY count(*) DESC LIMIT 1	sakila_1

SELECT * FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id WHERE T1.first_name = "Lisa"	sakila_1
SELECT T2.amount FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id WHERE T1.first_name = "Lisa" ORDER BY T2.amount DESC LIMIT 1	sakila_1
SELECT amount FROM payment ORDER BY amount DESC LIMIT 1	sakila_1

SELECT * FROM staff AS T1 JOIN store AS T2 ON T1.store_id  =  T2.store_id WHERE T1.first_name  =  'Elsa'	sakila_1
SELECT email FROM staff WHERE first_name  =  'Elsa'	sakila_1
SELECT T2.address FROM staff AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE T1.first_name  =  'Elsa'	sakila_1

SELECT * FROM Faculty	activity_1
SELECT count(*) FROM Faculty	activity_1

SELECT rank FROM Faculty	activity_1
SELECT DISTINCT rank FROM Faculty	activity_1

SELECT building FROM Faculty	activity_1
SELECT DISTINCT building FROM Faculty	activity_1

SELECT Fname FROM Faculty	activity_1
SELECT Fname ,  Lname FROM Faculty	activity_1
SELECT rank ,  Fname ,  Lname FROM Faculty	activity_1

select * from Faculty	activity_1
select * from Faculty WHERE Sex  =  'F'	activity_1
SELECT Fname ,  Lname ,  phone FROM Faculty WHERE Sex  =  'F'	activity_1

SELECT FacID FROM Faculty	activity_1
SELECT FacID FROM Faculty WHERE Sex  =  'M'	activity_1

SELECT count(*) FROM Faculty	activity_1
SELECT count(*) FROM Faculty WHERE Sex  =  'F'	activity_1
SELECT count(*) FROM Faculty WHERE Sex  =  'F' AND Rank  =  "Professor"	activity_1

select * from Faculty	activity_1
select * from Faculty WHERE Fname  =  "Jerry" AND Lname  =  "Prince"	activity_1
SELECT phone ,  room ,  building FROM Faculty WHERE Fname  =  "Jerry" AND Lname  =  "Prince"	activity_1

SELECT count(*) FROM Faculty	activity_1
SELECT count(*) FROM Faculty WHERE Rank  =  "Professor"	activity_1
SELECT count(*) FROM Faculty WHERE Rank  =  "Professor" AND building  =  "NEB"	activity_1

SELECT fname ,  lname FROM Faculty	activity_1
SELECT fname ,  lname FROM Faculty WHERE Rank  =  "Instructor"	activity_1

SELECT building FROM Faculty	activity_1
SELECT building ,  count(*) FROM Faculty GROUP BY building	activity_1

SELECT building FROM Faculty	activity_1
SELECT building, count(*) FROM Faculty GROUP BY building	activity_1
SELECT building, count(*) FROM Faculty GROUP BY building ORDER BY count(*) DESC	activity_1
SELECT building FROM Faculty GROUP BY building ORDER BY count(*) DESC LIMIT 1	activity_1

SELECT building FROM Faculty	activity_1
SELECT building FROM Faculty WHERE rank  =  "Professor"	activity_1
SELECT building, count(*) FROM Faculty WHERE rank  =  "Professor" GROUP BY building	activity_1
SELECT building FROM Faculty WHERE rank  =  "Professor" GROUP BY building HAVING count(*)  >=  10	activity_1

SELECT rank FROM Faculty	activity_1
SELECT rank ,  count(*) FROM Faculty GROUP BY rank	activity_1

SELECT rank ,  sex FROM Faculty	activity_1
SELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex	activity_1

SELECT rank FROM Faculty	activity_1
SELECT rank, count(*) FROM Faculty GROUP BY rank	activity_1
SELECT rank FROM Faculty GROUP BY rank ORDER BY count(*)	activity_1
SELECT rank FROM Faculty GROUP BY rank ORDER BY count(*) ASC LIMIT 1	activity_1

SELECT sex FROM Faculty	activity_1
SELECT sex FROM Faculty WHERE rank  =  "AsstProf"	activity_1
SELECT sex ,  count(*) FROM Faculty WHERE rank  =  "AsstProf" GROUP BY sex	activity_1

SELECT fname ,  lname FROM Faculty	activity_1
SELECT T1.fname ,  T1.lname, T2.fname ,  T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor	activity_1
SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T2.fname  =  "Linda" AND T2.lname  =  "Smith"	activity_1

SELECT StuID FROM Student	activity_1
SELECT T2.StuID, T1.rank FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor	activity_1
SELECT T2.StuID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.rank  =  "Professor"	activity_1

SELECT fname ,  lname FROM Student	activity_1
SELECT T2.fname ,  T2.lname, T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor	activity_1
SELECT T2.fname ,  T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.fname  =  "Michael" AND T1.lname  =  "Goodrich"	activity_1

SELECT FacID from Faculty	activity_1
SELECT T1.FacID ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID	activity_1

SELECT rank FROM Faculty	activity_1
SELECT T1.rank ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.rank	activity_1

SELECT fname ,  lname FROM Faculty	activity_1
SELECT T1.fname ,  T1.lname, count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID	activity_1
SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC	activity_1
SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1	activity_1

SELECT FacID FROM Faculty	activity_1
SELECT T1.FacID, count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID	activity_1
SELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID HAVING count(*)  >=  2	activity_1

SELECT advisor FROM Student	activity_1
SELECT FacID FROM Faculty EXCEPT SELECT advisor FROM Student	activity_1

SELECT * FROM Activity	activity_1
SELECT activity_name FROM Activity	activity_1

SELECT * FROM Activity	activity_1
SELECT count(*) FROM Activity	activity_1

select FacID FROM Faculty_participates_in	activity_1
SELECT count(DISTINCT FacID) FROM Faculty_participates_in	activity_1

SELECT FacID FROM Faculty_participates_in	activity_1
SELECT FacID FROM Faculty EXCEPT SELECT FacID FROM Faculty_participates_in	activity_1

SELECT FacID FROM Faculty_participates_in	activity_1
SELECT advisor FROM Student	activity_1
SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student	activity_1

SELECT T1.fname, T1.lname, T2.actid FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID	activity_1
SELECT count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID WHERE T1.fname  =  "Mark" AND T1.lname  =  "Giuliano"	activity_1

SELECT activity_name FROM Activity	activity_1
SELECT T3.activity_name, T1.fname, T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN Activity AS T3 ON T3.actid  =  T2.actid	activity_1
SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN Activity AS T3 ON T3.actid  =  T2.actid WHERE T1.fname  =  "Mark" AND T1.lname  =  "Giuliano"	activity_1

SELECT  fname ,  lname FROM Faculty	activity_1
SELECT  T1.fname ,  T1.lname  FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID	activity_1
SELECT  T1.fname ,  T1.lname ,  count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID	activity_1

SELECT activity_name from Activity	activity_1
SELECT T1.activity_name ,  count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID	activity_1

SELECT  fname ,  lname FROM Faculty	activity_1
SELECT  T1.fname ,  T1.lname, count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID	activity_1
SELECT  T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID ORDER BY count(*) DESC	activity_1
SELECT  T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1	activity_1

SELECT activity_name FROM Activity	activity_1
SELECT T1.activity_name, count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID	activity_1
SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC	activity_1
SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1	activity_1

SELECT StuID FROM Participates_in	activity_1
SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in	activity_1

SELECT StuID FROM Participates_in	activity_1
SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age  <  20	activity_1

SELECT fname ,  lname FROM Student	activity_1
SELECT T1.fname ,  T1.lname, count(*) FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID	activity_1
SELECT T1.fname ,  T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC	activity_1
SELECT T1.fname ,  T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1	activity_1

SELECT activity_name FROM Activity	activity_1
SELECT T1.activity_name, count(*) FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID	activity_1
SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC	activity_1
SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1	activity_1

SELECT fname FROM Faculty	activity_1
SELECT DISTINCT T1.fname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing'	activity_1
SELECT DISTINCT T1.fname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Kayaking'	activity_1
SELECT DISTINCT T1.fname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'	activity_1

SELECT T1.fname, T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid	activity_1
SELECT DISTINCT T1.fname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'	activity_1
SELECT fname FROM faculty EXCEPT SELECT DISTINCT T1.fname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'	activity_1
SELECT fname FROM faculty WHERE rank  =  'Professor' EXCEPT SELECT DISTINCT T1.fname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'	activity_1

SELECT fname FROM Faculty	activity_1
SELECT T1.fname, T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid	activity_1
SELECT T1.fname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing'	activity_1
SELECT T1.fname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Kayaking'	activity_1
SELECT T1.fname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' INTERSECT SELECT T1.fname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Kayaking'	activity_1

SELECT Name, Birth_Year from singer	singer
SELECT Name, Birth_Year from singer WHERE Birth_Year = 1948	singer
SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949	singer

SELECT Name, Net_Worth_Millions FROM singer	singer
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC	singer
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1	singer

SELECT Name, Citizenship FROM singer	singer
SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship	singer
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC	singer
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1	singer

SELECT t1.name, t2.title from singer as t1 join song as t2 on t1.Singer_ID = t2.Singer_ID	singer
SELECT t1.name, t2.title from singer as t1 join song as t2 on t1.Singer_ID = t2.Singer_ID WHERE t2.Sales > 300000	singer
SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000	singer

SELECT T1.Name, COUNT(*) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name	singer
SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1	singer

SELECT title, Sales from song	singer
SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name	singer

SELECT DISTINCT Singer_ID from song	singer
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)	singer

SELECT * FROM documents	document_management
SELECT document_name ,  access_count FROM documents ORDER BY document_name	document_management

SELECT document_name, access_count FROM documents	document_management
SELECT document_name ,  access_count FROM documents ORDER BY access_count DESC LIMIT 1	document_management

SELECT * FROM documents	document_management
SELECT document_type_code FROM documents GROUP BY document_type_code	document_management
SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  4	document_management

SELECT * FROM documents	document_management
SELECT sum(access_count) FROM documents GROUP BY document_type_code	document_management
SELECT sum(access_count) FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1	document_management

SELECT access_count FROM documents	document_management
SELECT avg(access_count) FROM documents	document_management

SELECT * FROM documents	document_management
SELECT document_type_code FROM documents WHERE document_name  =  "David CV"	document_management

SELECT * FROM documents	document_management
SELECT document_type_code FROM documents GROUP BY document_type_code HAVING sum(access_count)  >  10000	document_management

SELECT * FROM documents WHERE document_name  =  "David CV"	document_management
SELECT t2.section_title FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code WHERE t1.document_name  =  "David CV"	document_management

SELECT * FROM documents	document_management
SELECT document_name FROM documents WHERE document_code NOT IN (SELECT document_code FROM document_sections)	document_management

SELECT * FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code  =  t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code  =  t3.functional_area_code WHERE t3.functional_area_description  =  "Acknowledgement"	document_management
SELECT avg(t1.access_count) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code  =  t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code  =  t3.functional_area_code WHERE t3.functional_area_description  =  "Acknowledgement"	document_management

SELECT * FROM documents	document_management
SELECT document_name FROM documents EXCEPT SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code JOIN document_sections_images AS t3 ON t2.section_id  =  t3.section_id	document_management

SELECT * FROM documents	document_management
SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code GROUP BY t1.document_code ORDER BY count(*)	document_management
SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code GROUP BY t1.document_code ORDER BY count(*) DESC LIMIT 1	document_management

SELECT document_name FROM documents	document_management
SELECT document_name FROM documents WHERE document_name LIKE "%CV%"	document_management

SELECT * FROM users	document_management
SELECT count(*) FROM users WHERE user_login  =  1	document_management

SELECT * FROM users WHERE user_login = 1	document_management
SELECT role_code FROM users WHERE user_login  =  1 GROUP BY role_code ORDER BY count(*) DESC LIMIT 1	document_management
SELECT role_description FROM ROLES WHERE role_code  =  (SELECT role_code FROM users WHERE user_login  =  1 GROUP BY role_code ORDER BY count(*) DESC LIMIT 1)	document_management

SELECT * FROM documents	document_management
SELECT avg(access_count) FROM documents GROUP BY document_structure_code	document_management
SELECT avg(access_count) FROM documents GROUP BY document_structure_code ORDER BY count(*) ASC LIMIT 1	document_management

SELECT * FROM images	document_management
SELECT image_name ,  image_url FROM images ORDER BY image_name	document_management

SELECT * FROM users	document_management
SELECT role_code FROM users GROUP BY role_code	document_management
SELECT count(*) ,  role_code FROM users GROUP BY role_code	document_management

SELECT * FROM farm	farm
SELECT bulls FROM farm	farm
SELECT cows FROM farm	farm
SELECT max(Cows) ,  min(Cows) FROM farm	farm

SELECT official_name FROM city	farm
SELECT official_name FROM city ORDER BY population DESC LIMIT 1	farm
SELECT official_name, population FROM city ORDER BY population DESC LIMIT 1	farm
SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1	farm

SELECT official_name FROM city	farm
SELECT t1.official_name, t2.competition_id FROM city as t1 join farm_competition AS t2 ON t1.city_id = t2.host_city_id	farm
SELECT t1.official_name, t2.theme FROM city as t1 join farm_competition AS t2 ON t1.city_id = t2.host_city_id	farm
SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1	farm

SELECT official_name FROM city	farm
SELECT t1.official_name, count(*) FROM city as t1 join farm_competition AS t2 ON t1.city_id = t2.host_city_id GROUP BY city_id	farm
SELECT T1.official_name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1	farm
SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1	farm

SELECT * FROM city	farm
SELECT * FROM city WHERE population > 1000	farm
SELECT t2.year FROM city AS t1 JOIN farm_competition AS t2 ON t1.city_id  = t2.host_city_id WHERE population > 1000	farm
SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000	farm

SELECT DISTINCT official_name FROM city	farm
SELECT DISTINCT status FROM city	farm
SELECT status, count(*) FROM city GROUP BY status	farm
SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC	farm

SELECT official_name FROM city	farm
SELECT status FROM city WHERE official_name = "Grand Falls/Grand-Sault"	farm
SELECT official_name FROM city WHERE status != "Town"	farm
SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1	farm

SELECT * FROM city	farm
SELECT official_name FROM city	farm
SELECT DISTINCT official_name FROM city AS t1 JOIN farm_competition AS t2 ON t1.city_id  = t2.host_city_id	farm
SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)	farm

SELECT official_name FROM city	farm
SELECT official_name FROM city WHERE population > 1500	farm
SELECT official_name FROM city WHERE population < 500	farm
SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500	farm

SELECT killed FROM death	battle_death
SELECT max(killed) FROM death	battle_death
SELECT min(killed) FROM death	battle_death
SELECT max(killed) ,  min(killed) FROM death	battle_death

SELECT * FROM death as T1 JOIN ship as T2 ON T1.caused_by_ship_id  =  T2.id	battle_death
SELECT * FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'	battle_death
SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'	battle_death

SELECT id, name FROM battle	battle_death
SELECT DISTINCT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle	battle_death
SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'	battle_death

SELECT T1.id ,  T1.name, sum(T3.killed), sum(T3.injured) FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id	battle_death
SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10	battle_death

SELECT T2.id ,  T2.name, sum(T1.injured) FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id	battle_death
SELECT T2.id ,  T2.name, sum(T1.injured) FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY sum(T1.injured)	battle_death
SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY sum(T1.injured) DESC LIMIT 1	battle_death

SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan'	battle_death
SELECT name FROM battle WHERE latin_commander  =  'Baldwin I'	battle_death
SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'	battle_death

SELECT lost_in_battle FROM ship WHERE tonnage  =  '225'	battle_death
SELECT T2.id, T2.name from ship AS T1 join battle AS T2 ON T1.lost_in_battle = T2.id WHERE tonnage  =  '225'	battle_death
SELECT id, name FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );	battle_death
SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );	battle_death

SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice'	battle_death
SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atlanta'	battle_death
SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'	battle_death

SELECT T1.id, T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'	battle_death
SELECT T1.id, T1.name FROM battle EXCEPT SELECT T1.id, T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'	battle_death
SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'	battle_death

SELECT * FROM architect WHERE gender  =  'female'	architecture
SELECT count(*) FROM architect WHERE gender  =  'female'	architecture

SELECT * FROM architect WHERE gender  =  'male'	architecture
SELECT name ,  nationality ,  id FROM architect WHERE gender  =  'male'	architecture
SELECT name ,  nationality ,  id FROM architect WHERE gender  =  'male' ORDER BY name	architecture

SELECT length_meters FROM bridge	architecture
SELECT max(length_meters) FROM bridge	architecture
SELECT max(T1.length_meters) ,  T2.name FROM bridge AS T1 JOIN architect AS T2 ON T1.architect_id  =  T2.id	architecture

SELECT length_feet FROM bridge	architecture
SELECT avg(length_meters) FROM bridge	architecture

SELECT name FROM mill	architecture
SELECT name FROM mill WHERE TYPE  =  'Grondzeiler'	architecture
SELECT name ,  built_year FROM mill WHERE TYPE  =  'Grondzeiler'	architecture

SELECT architect_id FROM mill	architecture
SELECT DISTINCT T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS t2 ON T1.id  =  T2.architect_id	architecture

SELECT * FROM mill	architecture
SELECT * FROM mill WHERE LOCATION != 'Donceel'	architecture
SELECT name FROM mill WHERE LOCATION != 'Donceel'	architecture

SELECT * FROM architect  WHERE nationality  =  'American' OR nationality  =  'Canadian'	architecture
SELECT * FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id WHERE T2.nationality  =  'American' OR T2.nationality  =  'Canadian'	architecture
SELECT DISTINCT T1.type FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id WHERE T2.nationality  =  'American' OR T2.nationality  =  'Canadian'	architecture

SELECT architect_id FROM bridge	architecture
SELECT count(*) FROM bridge GROUP BY architect_id	architecture
SELECT T1.id ,  T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  >=  3	architecture

SELECT count(*) FROM mill GROUP BY architect_id	architecture
SELECT * FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1	architecture
SELECT T1.id ,  T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1	architecture

SELECT count(*) FROM bridge GROUP BY architect_id	architecture
SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  2	architecture
SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  2 UNION SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  1	architecture

SELECT LOCATION FROM bridge	architecture
SELECT LOCATION FROM bridge WHERE name  =  'Kolob Arch'	architecture
SELECT LOCATION FROM bridge WHERE name  =  'Kolob Arch' OR name  =  'Rainbow Bridge'	architecture

SELECT name FROM mill	architecture
SELECT name FROM mill WHERE name LIKE '%Moulin%'	architecture

SELECT * FROM bridge WHERE length_meters  >  80	architecture
SELECT * FROM architect AS t2 JOIN bridge AS T3 ON T3.architect_id  =  T2.id WHERE T3.length_meters  >  80	architecture
SELECT DISTINCT T1.name FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id JOIN bridge AS T3 ON T3.architect_id  =  T2.id WHERE T3.length_meters  >  80	architecture

SELECT count(*) FROM mill GROUP BY TYPE	architecture
SELECT TYPE FROM mill GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1	architecture
SELECT TYPE ,  count(*) FROM mill GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1	architecture

SELECT * FROM mill WHERE built_year  <  1850	architecture
SELECT architect_id FROM mill WHERE built_year  <  1850	architecture
SELECT count(*) FROM architect WHERE id NOT IN ( SELECT architect_id FROM mill WHERE built_year  <  1850 )	architecture

SELECT name, nationality FROM architect	architecture
SELECT name, nationality, id FROM architect	architecture
SELECT name, nationality, id FROM architect WHERE gender = "male"	architecture
SELECT name, nationality, id FROM architect WHERE gender = "male" ORDER BY name	architecture

SELECT DISTINCT type FROM mill	architecture
SELECT DISTINCT T1.type FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id WHERE T2.nationality  =  'American'	architecture
SELECT DISTINCT T1.type FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id WHERE T2.nationality  =  'American' OR T2.nationality  =  'Canadian'	architecture

SELECT id, name FROM architect	architecture
SELECT count(*) FROM (SELECT T1.id ,  T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  <  3)	architecture
SELECT count(*) FROM (SELECT T1.id ,  T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  >=  3)	architecture
SELECT T1.id ,  T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  >=  3	architecture

SELECT T1.name , count(*) FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id ORDER BY count(*)	architecture
SELECT T1.name , count(*) FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id ORDER BY count(*) DESC	architecture
SELECT T1.name FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1	architecture
SELECT T1.id ,  T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1	architecture

SELECT T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  2	architecture
SELECT T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  2 UNION SELECT T1.name FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  1	architecture
SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  2 UNION SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  1	architecture

SELECT DISTINCT LOCATION FROM bridge	architecture
SELECT LOCATION FROM bridge WHERE name  =  'Kolob Arch'	architecture
SELECT LOCATION FROM bridge WHERE name  =  'Kolob Arch' OR name  =  'Rainbow Bridge'	architecture

SELECT name FROM mill	architecture
SELECT name FROM mill WHERE name LIKE '%Moulin%'	architecture

SELECT DISTINCT T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id	architecture
SELECT DISTINCT T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id WHERE T2.length_meters > 80	architecture
SELECT count(DISTINCT T2.name) FROM mill AS T1 JOIN architect AS T2 ON T1.architect_id  =  T2.id JOIN bridge AS T3 ON T3.architect_id  =  T2.id WHERE T3.length_meters  >  80	architecture
SELECT DISTINCT T1.name FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id JOIN bridge AS T3 ON T3.architect_id  =  T2.id WHERE T3.length_meters  >  80	architecture

SELECT DISTINCT TYPE FROM mill	architecture
SELECT TYPE FROM mill GROUP BY TYPE ORDER BY count(*) DESC	architecture
SELECT TYPE FROM mill GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1	architecture
SELECT TYPE ,  count(*) FROM mill GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1	architecture

SELECT count(*) FROM architect	architecture
SELECT count(*) FROM architect WHERE id IN ( SELECT architect_id FROM mill )	architecture
SELECT count(*) FROM architect WHERE id NOT IN ( SELECT architect_id FROM mill WHERE built_year  <  1850 )	architecture

SELECT * FROM area_code_state	voter_1
SELECT count(*) FROM area_code_state	voter_1

SELECT * FROM contestants	voter_1
SELECT  contestant_name FROM contestants	voter_1
SELECT contestant_number ,  contestant_name FROM contestants	voter_1
SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC	voter_1

SELECT state FROM votes	voter_1
SELECT vote_id,  state FROM votes	voter_1
SELECT vote_id ,  phone_number ,  state FROM votes	voter_1

SELECT area_code FROM area_code_state	voter_1
SELECT max(area_code) FROM area_code_state	voter_1
SELECT min(area_code) FROM area_code_state	voter_1
SELECT max(area_code) ,  min(area_code) FROM area_code_state	voter_1

SELECT * FROM votes	voter_1
SELECT * FROM votes WHERE state  =  'CA'	voter_1
SELECT max(created) FROM votes WHERE state  =  'CA'	voter_1

SELECT * FROM contestants	voter_1
SELECT contestant_name FROM contestants	voter_1
SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'	voter_1

SELECT * FROM votes	voter_1
SELECT state FROM votes	voter_1
SELECT DISTINCT state ,  created FROM votes	voter_1

SELECT * FROM contestants	voter_1
SELECT * FROM votes	voter_1
SELECT * FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2	voter_1
SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2	voter_1

SELECT * FROM contestants	voter_1
SELECT * FROM votes	voter_1
SELECT * FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1	voter_1
SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1	voter_1

SELECT * FROM votes	voter_1
SELECT * FROM votes WHERE state  =  'NY' OR state  =  'CA'	voter_1
SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'	voter_1

SELECT * FROM contestants	voter_1
SELECT * FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )	voter_1
SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )	voter_1

SELECT * FROM area_code_state	voter_1
SELECT * FROM votes	voter_1
SELECT count(*) FROM AREA_CODE_STATE AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code	voter_1
SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1	voter_1

SELECT * FROM votes	voter_1
SELECT * FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'	voter_1
SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'	voter_1

SELECT * FROM area_code_state	voter_1
SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling'	voter_1
SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'	voter_1

SELECT Status FROM roller_coaster	roller_coaster
SELECT Status FROM roller_coaster WHERE LENGTH  >  3300	roller_coaster
SELECT Status FROM roller_coaster WHERE LENGTH  >  3300 OR Height  >  100	roller_coaster

SELECT name FROM Roller_coaster	roller_coaster
SELECT name FROM roller_coaster ORDER BY LENGTH DESC LIMIT 1	roller_coaster
SELECT Speed FROM roller_coaster ORDER BY LENGTH DESC LIMIT 1	roller_coaster

SELECT name FROM Roller_coaster	roller_coaster
SELECT name,status FROM Roller_coaster	roller_coaster
SELECT Status FROM roller_coaster GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1	roller_coaster

SELECT name FROM Roller_coaster	roller_coaster
SELECT name,status FROM Roller_coaster	roller_coaster
SELECT Status FROM roller_coaster GROUP BY Status HAVING COUNT(*)  >  2	roller_coaster

SELECT name FROM Roller_coaster	roller_coaster
SELECT name,speed FROM Roller_coaster	roller_coaster
SELECT name,speed FROM Roller_coaster ORDER BY Speed DESC LIMIT 1	roller_coaster
SELECT Park FROM roller_coaster ORDER BY Speed DESC LIMIT 1	roller_coaster

SELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID	roller_coaster
SELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name HAVING COUNT(*)  >  1	roller_coaster

SELECT name FROM Roller_coaster	roller_coaster
SELECT name,height FROM Roller_coaster	roller_coaster
SELECT name,height FROM Roller_coaster ORDER BY height DESC LIMIT 1	roller_coaster
SELECT T1.Name ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID ORDER BY T2.Height DESC LIMIT 1	roller_coaster

SELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID	roller_coaster
SELECT name, speed FROM roller_coaster	roller_coaster
SELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID	roller_coaster

SELECT name FROM Roller_coaster	roller_coaster
SELECT name,length FROM Roller_coaster	roller_coaster
SELECT name,length FROM Roller_coaster where length > 3000	roller_coaster
SELECT count(*) FROM country WHERE country_id NOT IN ( SELECT country_id FROM roller_coaster WHERE LENGTH  >  3000 )	roller_coaster

SELECT title FROM MOVIE WHERE director = 'James Cameron'	movie_1
SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR  >  2000	movie_1

SELECT name FROM Reviewer	movie_1
SELECT name FROM Reviewer WHERE name LIKE "%Mike%"	movie_1
SELECT rID FROM Reviewer WHERE name LIKE "%Mike%"	movie_1

SELECT * FROM Rating	movie_1
SELECT max(stars) ,  min(stars) FROM Rating	movie_1

SELECT title FROM movie	movie_1
SELECT t1.title, t2.stars FROM Movie AS t1 JOIN Rating AS t2 on t1.mID = t2.mID	movie_1
SELECT t1.title, t2.stars FROM Movie AS t1 JOIN Rating AS t2 on t1.mID = t2.mID WHERE t2.stars >= 4	movie_1
SELECT DISTINCT YEAR FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  >=  4 ORDER BY T1.year	movie_1

SELECT title FROM movie	movie_1
SELECT t1.title FROM movie AS t1 JOIN Rating AS t2 ON t1.mID = t2.mID where t2.stars = 5	movie_1
SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  5	movie_1

SELECT name FROM Reviewer	movie_1
SELECT T2.name ,  max(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name	movie_1
SELECT T2.name ,  min(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name	movie_1
SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name	movie_1

SELECT title FROM movie	movie_1
SELECT title FROM Movie WHERE mID NOT IN (SELECT mID FROM Rating)	movie_1

SELECT title FROM movie	movie_1
SELECT title FROM movie WHERE Year = (SELECT min(YEAR) FROM Movie)	movie_1
SELECT avg(T1.stars) ,  T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT min(YEAR) FROM Movie)	movie_1

SELECT title FROM movie	movie_1
SELECT title FROM movie WHERE Year = (SELECT max(YEAR) FROM Movie)	movie_1

SELECT title FROM movie	movie_1
SELECT title FROM movie WHERE Year = (SELECT max(YEAR) FROM Movie)	movie_1
SELECT max(T1.stars) ,  T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT max(YEAR) FROM Movie)	movie_1

SELECT title FROM Movie WHERE director  =  "Steven Spielberg"	movie_1
SELECT title, year FROM Movie WHERE director  =  "Steven Spielberg"	movie_1
SELECT title FROM Movie WHERE YEAR  >  (SELECT max(YEAR) FROM Movie WHERE director  =  "Steven Spielberg")	movie_1

SELECT title FROM Movie WHERE director  =  "James Cameron"	movie_1
SELECT T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  "James Cameron"	movie_1
SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  "James Cameron"	movie_1
SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  "James Cameron")	movie_1

SELECT title FROM movie	movie_1
SELECT T3.name ,  T2.title ,  T1.stars ,  T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID	movie_1
SELECT T3.name ,  T2.title ,  T1.stars ,  T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID ORDER BY T3.name ,  T2.title ,  T1.stars	movie_1

SELECT name FROM Reviewer	movie_1
SELECT * FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID	movie_1
SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  3	movie_1

SELECT * FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  'Gone with the Wind'	movie_1
SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  'Gone with the Wind'	movie_1

SELECT * FROM rating AS t1 JOIN Reviewer AS t2 on t1.rID = t2.rID where t2.name = "Sarah Martinez"	movie_1
SELECT distinct t1.title FROM Movie as t1 JOIN Rating as t2 on t1.mID = t2.mID JOIN Reviewer AS t3 on t2.rID = t3.rID WHERE t3.name = "Sarah Martinez"	movie_1
SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Sarah Martinez'	movie_1

SELECT title FROM Movie	movie_1
SELECT T3.name, T2.title, T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID	movie_1
SELECT T3.name, T2.title, T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name	movie_1
SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name	movie_1

SELECT name FROM Reviewer	movie_1
SELECT name FROM Reviewer UNION SELECT title FROM Movie	movie_1

SELECT * FROM rating as t1 JOIN reviewer as t2 on t1.rID = t2.rID and t2.name = 'Chris Jackson'	movie_1
SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Chris Jackson'	movie_1
SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Chris Jackson'	movie_1

SELECT DISTINCT director FROM Movie	movie_1
SELECT count(*), director FROM Movie group by director	movie_1
SELECT director FROM Movie group by director having count(*) > 1	movie_1
SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title	movie_1

SELECT DISTINCT director FROM Movie	movie_1
SELECT count(*), director FROM Movie group by director	movie_1
SELECT director FROM Movie group by director having count(*) > 1	movie_1
SELECT T1.title ,  T1.year FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title	movie_1

SELECT DISTINCT director FROM Movie	movie_1
SELECT count(*), director FROM Movie group by director	movie_1
SELECT director FROM Movie group by director having count(*) = 1	movie_1

SELECT DISTINCT director FROM Movie	movie_1
SELECT count(*), director FROM Movie group by director	movie_1
SELECT director FROM Movie WHERE director != "null" GROUP BY director HAVING count(*)  =  1	movie_1

SELECT DISTINCT director FROM Movie	movie_1
SELECT count(*) ,  T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID GROUP BY T1.director	movie_1

SELECT title FROM Movie	movie_1
SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID	movie_1
SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) DESC LIMIT 1	movie_1

SELECT title FROM Movie	movie_1
SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID	movie_1
SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT 1	movie_1

SELECT title FROM Movie	movie_1
SELECT T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID	movie_1
SELECT T2.title ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID ORDER BY T1.stars DESC LIMIT 3	movie_1

SELECT distinct director FROM Movie WHERE director != "null"	movie_1
SELECT T2.director ,  max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE director != "null" GROUP BY director	movie_1
SELECT T2.title ,  T1.stars ,  T2.director ,  max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE director != "null" GROUP BY director	movie_1

SELECT name from Reviewer	movie_1
SELECT min(stars) FROM Rating GROUP BY rID	movie_1
SELECT T2.title ,  T1.rID ,  T1.stars ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.rID	movie_1

SELECT distinct director FROM Movie	movie_1
SELECT T2.director ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY director	movie_1
SELECT T2.title ,  T1.stars ,  T2.director ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T2.director	movie_1

SELECT title FROM Movie	movie_1
SELECT count(*) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY t1.mID	movie_1
SELECT T2.title ,  T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1	movie_1

SELECT title FROM Movie	movie_1
SELECT T2.title, T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID	movie_1
SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN 3 AND 5	movie_1

SELECT name FROM Reviewer	movie_1
SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  3	movie_1

SELECT name FROM Reviewer	movie_1
SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  "Brittany Harris"	movie_1
SELECT mID ,  avg(stars) FROM Rating WHERE mID NOT IN (SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  "Brittany Harris") GROUP BY mID	movie_1

SELECT name FROM Reviewer	movie_1
SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  "Brittany Harris"	movie_1
SELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  "Brittany Harris"	movie_1

SELECT mID, stars FROM Rating	movie_1
SELECT mID ,  avg(stars) FROM Rating GROUP BY mID	movie_1
SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2	movie_1

SELECT * FROM Rating	movie_1
SELECT distinct rID FROM Rating WHERE stars  =  4	movie_1
SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  4	movie_1

SELECT title FROM Movie	movie_1
SELECT title FROM Movie where year > 2000	movie_1
SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000	movie_1

SELECT title FROM Movie	movie_1
SELECT title FROM Movie where year < 1980	movie_1
SELECT title FROM Movie WHERE director  =  "James Cameron" OR YEAR   <  1980	movie_1

SELECT name FROM Reviewer	movie_1
SELECT T2.name, T1.stars FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID	movie_1
SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  3 INTERSECT SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  4	movie_1

SELECT DISTINCT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id	loan_1
SELECT T1.cust_name, sum(T2.amount) FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name	loan_1
SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)	loan_1

SELECT cust_name FROM customer	loan_1
SELECT cust_name FROM customer WHERE cust_name LIKE '%a%'	loan_1
SELECT cust_name ,  acc_bal FROM customer WHERE cust_name LIKE '%a%'	loan_1

SELECT distinct state FROM customer	loan_1
SELECT cust_name FROM customer WHERE state  =  'Utah' OR state  =  'Texas'	loan_1
SELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'	loan_1

SELECT cust_name FROM customer WHERE acc_type  =  'saving'	loan_1
SELECT cust_name FROM customer WHERE acc_type  =  'checking'	loan_1
SELECT cust_name FROM customer WHERE acc_type  =  'saving' INTERSECT SELECT cust_name FROM customer WHERE acc_type  =  'checking'	loan_1

SELECT count(*) FROM customer WHERE acc_type  =  'saving'	loan_1
SELECT cust_name FROM customer WHERE acc_type  =  'saving'	loan_1
SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'	loan_1

SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE T2.loan_type  =  'Mortgages'	loan_1
SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE T2.loan_type  =  'Mortgages'	loan_1

SELECT DISTINCT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id	loan_1
SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Mortgages'	loan_1
SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Auto'	loan_1

SELECT avg(credit_score) FROM customer	loan_1
SELECT * FROM customer WHERE credit_score  <  (SELECT avg(credit_score) FROM customer)	loan_1
SELECT cust_name FROM customer WHERE credit_score  <  (SELECT avg(credit_score) FROM customer)	loan_1

SELECT bname, no_of_customers FROM bank	loan_1
SELECT bname, no_of_customers FROM bank ORDER BY no_of_customers DESC	loan_1
SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1	loan_1

SELECT cust_name FROM customer	loan_1
SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1	loan_1

SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1	loan_1
SELECT cust_name FROM customer ORDER BY credit_score DESC LIMIT 1	loan_1
SELECT cust_name ,  acc_type ,  acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1	loan_1

SELECT avg(amount) FROM loan	loan_1
SELECT sum(amount) FROM loan	loan_1
SELECT DISTINCT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id	loan_1
SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1	loan_1

SELECT distinct state FROM bank	loan_1
SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1	loan_1

SELECT cust_name FROM customer WHERE credit_score  <  50	loan_1
SELECT avg(acc_bal) FROM customer WHERE credit_score  <  50	loan_1
SELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type	loan_1

SELECT distinct state FROM customer	loan_1
SELECT count(*),  state FROM customer WHERE credit_score  >  100 GROUP BY state	loan_1
SELECT sum(acc_bal) ,  state FROM customer WHERE credit_score  >  100 GROUP BY state	loan_1

SELECT count(*) FROM bank WHERE state != "New York"	loan_1
SELECT count(*) FROM bank	loan_1
SELECT count(*),  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname	loan_1
SELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname	loan_1

SELECT count(*) FROM loan	loan_1
SELECT sum(amount) FROM loan	loan_1
SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id	loan_1
SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1	loan_1

SELECT DISTINCT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id	loan_1
SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000	loan_1
SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000	loan_1

SELECT sum(amount) FROM loan	loan_1
SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id	loan_1
SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname ORDER BY sum(T2.amount) DESC LIMIT 1	loan_1

SELECT cust_name FROM customer WHERE credit_score > 200	loan_1
SELECT cust_name FROM customer WHERE credit_score < 100	loan_1
SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100	loan_1
SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100 GROUP BY T2.bname ORDER BY sum(T1.amount) DESC LIMIT 1	loan_1

SELECT count(*) FROM loan WHERE amount  >  3000	loan_1
SELECT distinct loan_type FROM loan WHERE amount  >  3000	loan_1
SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE amount  >  3000	loan_1

SELECT sum(amount) FROM loan WHERE loan_type  =  'Business'	loan_1
SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'	loan_1
SELECT T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'	loan_1

SELECT cust_name, credit_score FROM customer	loan_1
SELECT cust_name FROM customer WHERE credit_score  <  100	loan_1
SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100	loan_1

SELECT count(*) FROM bank WHERE state  =  'New York'	loan_1
SELECT bname FROM bank WHERE state  =  'New York'	loan_1
SELECT sum(T2.amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.state  =  'New York'	loan_1

SELECT count(*) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)	loan_1
SELECT state FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)	loan_1
SELECT credit_score FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)	loan_1
SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)	loan_1

SELECT count(*) FROM Highschooler	network_1
SELECT count(*) FROM Highschooler WHERE grade  =  11 OR grade  =  12	network_1
SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10	network_1

SELECT count(distinct grade) FROM Highschooler	network_1
SELECT distinct grade FROM Highschooler	network_1
SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) ASC LIMIT 1	network_1
SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1	network_1

SELECT count(*) FROM Highschooler	network_1
SELECT grade, count(*) FROM Highschooler GROUP BY grade	network_1
SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  10	network_1
SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4	network_1

SELECT name FROM highschooler	network_1
SELECT T2.name, T3.name FROM friend as T1 join highschooler as T2  on friend_id = T2.ID join highschooler as T3 on student_id = T3.ID	network_1
SELECT T2.name, count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id	network_1

SELECT name FROM highschooler	network_1
SELECT T2.name, count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id	network_1
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) ASC LIMIT 1	network_1
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1	network_1

SELECT count(*) FROM (SELECT * FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  > 5)	network_1
SELECT count(*) FROM (SELECT * FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >= 3)	network_1
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3	network_1

SELECT * FROM highschooler where name = "Kyle"	network_1
SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  "Kyle"	network_1
SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  "Kyle"	network_1

SELECT * FROM highschooler where name = "Kyle"	network_1
SELECT T3.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.liked_id  =  T3.id WHERE T2.name  =  "Kyle"	network_1
SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  "Kyle"	network_1
SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  "Kyle"	network_1

SELECT ID FROM highschooler	network_1
SELECT student_id, count(*) FROM friend group by student_id	network_1
SELECT student_id FROM Friend	network_1
SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend	network_1

SELECT name FROM highschooler	network_1
SELECT count(*) FROM (SELECT * FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >= 5)	network_1
SELECT distinct T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id	network_1
SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id	network_1

SELECT student_id FROM Friend	network_1
SELECT distinct T1.student_id, T2.liked_id FROM Friend as T1 JOIN Likes as T2 ON T1.student_id = T2.student_id	network_1
SELECT distinct T1.student_id, T2.liked_id FROM Friend as T1 JOIN Likes as T2 ON T1.student_id = T2.student_id where T1.student_id in (SELECT liked_id FROM Likes)	network_1
SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes	network_1

SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id	network_1
SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id	network_1
SELECT count (*) FROM (SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id)	network_1
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id	network_1

SELECT name FROM Highschooler where ID not in (SELECT student_id FROM Likes)	network_1
SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id	network_1
SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id	network_1

SELECT count(distinct student_id) FROM likes	network_1
SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id	network_1
SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1	network_1
SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1	network_1

SELECT name FROM highschooler	network_1
SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  1	network_1
SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2	network_1

SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id	network_1
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2	network_1
SELECT T2.name, T2.grade FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2	network_1
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2	network_1

SELECT grade FROM highschooler where name = "Kyle"	network_1
SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id WHERE T2.name  =  "Kyle"	network_1
SELECT T3.name  FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id JOIN Highschooler as T3 on T3.ID = T1.student_id WHERE T2.name  =  "Kyle"	network_1
SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"	network_1

SELECT id, grade FROM highschooler	network_1
SELECT avg(grade) FROM highschooler	network_1
SELECT avg(grade) FROM Highschooler WHERE id not IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)	network_1
SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)	network_1

SELECT first_name, last_name from staff	driving_school
SELECT first_name, last_name, date_of_birth from staff	driving_school
SELECT date_of_birth FROM Staff WHERE first_name = "Janessa" AND last_name = "Sawayn";	driving_school

SELECT first_name, last_name, date_joined_staff from staff	driving_school
SELECT date_joined_staff FROM Staff WHERE first_name = "Janessa" AND last_name = "Sawayn";	driving_school

SELECT max(date_left_staff) from staff	driving_school
SELECT date_left_staff FROM Staff WHERE first_name = "Janessa" AND last_name = "Sawayn";	driving_school

SELECT count(*) from (SELECT DISTINCT nickname from staff)	driving_school
SELECT nickname FROM Staff WHERE first_name = "Janessa" AND last_name = "Sawayn";	driving_school

SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id ORDER by T1.city	driving_school
SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn";	driving_school

SELECT T2.first_name, T2.last_name, T1.country ,  T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id	driving_school
SELECT T1.country ,  T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn";	driving_school

SELECT DISTINCT customer_id from lessons	driving_school
SELECT customer_id, sum(lesson_time), count(*) from lessons GROUP by customer_id	driving_school
SELECT customer_id from customers WHERE first_name = "Rylan" AND last_name = "Goodwin";	driving_school
SELECT sum(T1.lesson_time) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = "Rylan" AND T2.last_name = "Goodwin";	driving_school

SELECT staff_address_id from staff where first_name = 'Janessa' and last_name = 'Sawayn'	driving_school
SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn";	driving_school

SELECT address_id from Addresses where city = 'Damianfort'	driving_school
SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = "Damianfort";	driving_school

SELECT staff_address_id from staff ORDER by staff_address_id DESC LIMIT 1	driving_school
SELECT T1.city ,  count(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1;	driving_school

SELECT T1.state_province_county, count(*) from Addresses as T1 join staff as T2 on T1.address_id = T2.staff_address_id GROUP by T2.staff_id	driving_school
SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county HAVING count(*) BETWEEN 2 AND 4;	driving_school

SELECT * from customers where last_name = 'Kohler'	driving_school
SELECT * from customers where last_name = 'Kohler' OR first_name = 'Marina'	driving_school
SELECT customer_status_code ,  cell_mobile_phone_number ,  email_address FROM Customers WHERE first_name = "Marina" OR last_name  =  "Kohler"	driving_school

SELECT first_name, last_name, date_became_customer from customers	driving_school
SELECT date_became_customer FROM Customers WHERE first_name = "Carole" AND last_name = "Bernhard";	driving_school

SELECT customer_status_code, count(*) from customers GROUP by customer_status_code	driving_school
SELECT customer_status_code, count(*) from customers GROUP by customer_status_code ORDER by count(*) ASC	driving_school
SELECT customer_status_code FROM Customers GROUP BY customer_status_code ORDER BY count(*) ASC LIMIT 1;	driving_school

SELECT T2.first_name, T2.last_name, count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id GROUP by T2.customer_id	driving_school
SELECT T2.first_name, T2.last_name, count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id GROUP by T2.customer_id where t1.lesson_status_code = 'Completed'	driving_school
SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = "Rylan" AND T2.last_name = "Goodwin" AND T1.lesson_status_code = "Completed";	driving_school

SELECT first_name, last_name, amount_outstanding from customers	driving_school
SELECT max(amount_outstanding) ,  min(amount_outstanding) ,  avg(amount_outstanding) FROM Customers;	driving_school

SELECT * FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = "Lockmanfurt";	driving_school
SELECT T1.first_name ,  T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = "Lockmanfurt";	driving_school

SELECT T1.first_name, T1.last_name, T2.country FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id	driving_school
SELECT T2.country FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = "Carole" AND T1.last_name = "Bernhard"	driving_school

SELECT T1.first_name, T1.last_name, T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id	driving_school
SELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = "Carole" AND T1.last_name = "Bernhard"	driving_school

SELECT T2.city, count(*) FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city	driving_school
SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;	driving_school

SELECT T2.first_name, T2.last_name, sum(T1.amount_payment) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP by T2.customer_id	driving_school
SELECT sum(T1.amount_payment) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = "Carole" AND T2.last_name = "Bernhard"	driving_school

SELECT customer_id from customers EXCEPT SELECT customer_id from Customer_Payments	driving_school
SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments );	driving_school

SELECT T2.first_name, T2.last_name, count(T1.amount_payment) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP by T2.customer_id	driving_school
SELECT T2.first_name ,  T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2;	driving_school

SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = "Janessa"	driving_school
SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn" AND nickname LIKE "%s%";	driving_school

SELECT T2.first_name, count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id GROUP by T2.first_name	driving_school
SELECT count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE "%a%"	driving_school

SELECT T2.staff_id, sum(lesson_time) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id GROUP by T2.staff_id	driving_school
SELECT sum(lesson_time) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn";	driving_school

SELECT T2.first_name, T2.last_name, sum(T1.price) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id GROUP by T2.staff_id	driving_school
SELECT T2.first_name, T2.last_name, avg(T1.price) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id GROUP by T2.staff_id	driving_school
SELECT avg(price) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn";	driving_school

SELECT T2.first_name, count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP by T2.first_name	driving_school
SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = "Ray"	driving_school

SELECT DISTINCT last_name FROM Staff	driving_school
SELECT DISTINCT last_name FROM Customers	driving_school
SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff	driving_school

SELECT DISTINCT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id  =  T2.staff_id	driving_school
SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id  =  T2.staff_id	driving_school

SELECT DISTINCT vehicle_id from Lessons	driving_school
SELECT T1.vehicle_id ,  T1.vehicle_details FROM Vehicles AS T1 JOIN Lessons AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T1.vehicle_id	driving_school
SELECT T1.vehicle_id ,  T1.vehicle_details FROM Vehicles AS T1 JOIN Lessons AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T1.vehicle_id ORDER BY count(*) DESC LIMIT 1	driving_school

SELECT first_name, last_name from staff	driving_school
SELECT first_name, last_name, date_of_birth from staff	driving_school
SELECT date_of_birth FROM Staff WHERE first_name = "Janessa" AND last_name = "Sawayn";	driving_school

SELECT first_name, last_name, date_joined_staff from staff	driving_school
SELECT date_joined_staff FROM Staff WHERE first_name = "Janessa" AND last_name = "Sawayn";	driving_school

SELECT max(date_left_staff) from staff	driving_school
SELECT date_left_staff FROM Staff WHERE first_name = "Janessa" AND last_name = "Sawayn";	driving_school

SELECT count(*) from (SELECT DISTINCT nickname from staff)	driving_school
SELECT nickname FROM Staff WHERE first_name = "Janessa" AND last_name = "Sawayn";	driving_school

SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id ORDER by T1.city	driving_school
SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn";	driving_school

SELECT T2.first_name, T2.last_name, T1.country ,  T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id	driving_school
SELECT T1.country ,  T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn";	driving_school

SELECT DISTINCT customer_id from lessons	driving_school
SELECT customer_id, sum(lesson_time), count(*) from lessons GROUP by customer_id	driving_school
SELECT customer_id from customers WHERE first_name = "Rylan" AND last_name = "Goodwin";	driving_school
SELECT sum(T1.lesson_time) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = "Rylan" AND T2.last_name = "Goodwin";	driving_school

SELECT staff_address_id from staff where first_name = 'Janessa' and last_name = 'Sawayn'	driving_school
SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn";	driving_school

SELECT address_id from Addresses where city = 'Damianfort'	driving_school
SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = "Damianfort";	driving_school

SELECT staff_address_id from staff ORDER by staff_address_id DESC LIMIT 1	driving_school
SELECT T1.city ,  count(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1;	driving_school

SELECT T1.state_province_county, count(*) from Addresses as T1 join staff as T2 on T1.address_id = T2.staff_address_id GROUP by T2.staff_id	driving_school
SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county HAVING count(*) BETWEEN 2 AND 4;	driving_school

SELECT * from customers where last_name = 'Kohler'	driving_school
SELECT * from customers where last_name = 'Kohler' OR first_name = 'Marina'	driving_school
SELECT customer_status_code ,  cell_mobile_phone_number ,  email_address FROM Customers WHERE first_name = "Marina" OR last_name  =  "Kohler"	driving_school

SELECT first_name, last_name, date_became_customer from customers	driving_school
SELECT date_became_customer FROM Customers WHERE first_name = "Carole" AND last_name = "Bernhard";	driving_school

SELECT customer_status_code, count(*) from customers GROUP by customer_status_code	driving_school
SELECT customer_status_code, count(*) from customers GROUP by customer_status_code ORDER by count(*) ASC	driving_school
SELECT customer_status_code FROM Customers GROUP BY customer_status_code ORDER BY count(*) ASC LIMIT 1;	driving_school

SELECT T2.first_name, T2.last_name, count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id GROUP by T2.customer_id	driving_school
SELECT T2.first_name, T2.last_name, count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id GROUP by T2.customer_id where t1.lesson_status_code = 'Completed'	driving_school
SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = "Rylan" AND T2.last_name = "Goodwin" AND T1.lesson_status_code = "Completed";	driving_school

SELECT first_name, last_name, amount_outstanding from customers	driving_school
SELECT max(amount_outstanding) ,  min(amount_outstanding) ,  avg(amount_outstanding) FROM Customers;	driving_school

SELECT * FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = "Lockmanfurt";	driving_school
SELECT T1.first_name ,  T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = "Lockmanfurt";	driving_school

SELECT T1.first_name, T1.last_name, T2.country FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id	driving_school
SELECT T2.country FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = "Carole" AND T1.last_name = "Bernhard"	driving_school

SELECT T1.first_name, T1.last_name, T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id	driving_school
SELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = "Carole" AND T1.last_name = "Bernhard"	driving_school

SELECT T2.city, count(*) FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city	driving_school
SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;	driving_school

SELECT T2.first_name, T2.last_name, sum(T1.amount_payment) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP by T2.customer_id	driving_school
SELECT sum(T1.amount_payment) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = "Carole" AND T2.last_name = "Bernhard"	driving_school

SELECT customer_id from customers EXCEPT SELECT customer_id from Customer_Payments	driving_school
SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments );	driving_school

SELECT T2.first_name, T2.last_name, count(T1.amount_payment) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP by T2.customer_id	driving_school
SELECT T2.first_name ,  T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2;	driving_school

SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = "Janessa"	driving_school
SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn" AND nickname LIKE "%s%";	driving_school

SELECT T2.first_name, count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id GROUP by T2.first_name	driving_school
SELECT count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE "%a%"	driving_school

SELECT T2.staff_id, sum(lesson_time) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id GROUP by T2.staff_id	driving_school
SELECT sum(lesson_time) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn";	driving_school

SELECT T2.first_name, T2.last_name, sum(T1.price) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id GROUP by T2.staff_id	driving_school
SELECT T2.first_name, T2.last_name, avg(T1.price) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id GROUP by T2.staff_id	driving_school
SELECT avg(price) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = "Janessa" AND T2.last_name = "Sawayn";	driving_school

SELECT T2.first_name, count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP by T2.first_name	driving_school
SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = "Ray"	driving_school

SELECT DISTINCT last_name FROM Staff	driving_school
SELECT DISTINCT last_name FROM Customers	driving_school
SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff	driving_school

SELECT DISTINCT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id  =  T2.staff_id	driving_school
SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id  =  T2.staff_id	driving_school

SELECT count(*) FROM residents	local_govt_and_lot
SELECT count(DISTINCT property_id) FROM properties	local_govt_and_lot
SELECT T1.property_id, count(*) FROM properties AS T1 JOIN residents AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.property_id ORDER BY count(*) DESC LIMIT 1	local_govt_and_lot
SELECT T1.property_id ,  count(*) FROM properties AS T1 JOIN residents AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.property_id	local_govt_and_lot

SELECT parent_organization_id FROM organizations WHERE organization_details = 'Robel-Schulist Group'	local_govt_and_lot
SELECT organization_details FROM organizations WHERE organization_id = (SELECT parent_organization_id FROM organizations WHERE organization_details = 'Robel-Schulist Group')	local_govt_and_lot
SELECT DISTINCT T1.service_type_code FROM services AS T1 JOIN organizations AS T2 ON T1.organization_id  =  T2.organization_id WHERE T2.organization_details  =  'Denesik and Sons Party'	local_govt_and_lot

SELECT count(*) FROM residents_services	local_govt_and_lot
SELECT t1.resident_id , count(*) FROM residents AS t1 JOIN residents_services AS t2 ON t1.resident_id = t2.resident_id GROUP BY t1.resident_id	local_govt_and_lot
SELECT t1.resident_id , t1.other_details , count(*) FROM residents AS t1 JOIN residents_services AS t2 ON t1.resident_id = t2.resident_id GROUP BY t1.resident_id	local_govt_and_lot
SELECT t1.resident_id , t1.other_details , count(*) FROM residents AS t1 JOIN residents_services AS t2 ON t1.resident_id = t2.resident_id GROUP BY t1.resident_id ORDER BY count(*) DESC	local_govt_and_lot

SELECT DISTINCT service_id FROM services	local_govt_and_lot
SELECT count(*) FROM services AS t1 JOIN residents_services AS t2 ON t1.service_id = t2.service_id WHERE service_type_code = 'Moving Out'	local_govt_and_lot
SELECT count(*) FROM services WHERE service_id NOT IN (SELECT DISTINCT t1.service_id FROM services AS t1 JOIN residents_services AS T2 ON t1.service_id = t2.service_id)	local_govt_and_lot
SELECT count(*) FROM Services AS T1 JOIN Residents_Services AS T2 ON T1.service_id  =  T2.service_id GROUP BY T1.service_id ORDER BY count(*) DESC LIMIT 1	local_govt_and_lot
SELECT T1.service_id ,  T1.service_details ,  count(*) FROM Services AS T1 JOIN Residents_Services AS T2 ON T1.service_id  =  T2.service_id GROUP BY T1.service_id ORDER BY count(*) DESC LIMIT 1	local_govt_and_lot

SELECT t1.customer_id FROM customers AS t1 JOIN customer_events AS t2 ON t1.customer_id = t2.customer_id	local_govt_and_lot
SELECT t1.customer_id FROM Customers AS t1 JOIN Customer_Events AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id HAVING count(*)  >=  3	local_govt_and_lot
SELECT t1.customer_id , t1.customer_details FROM Customers AS t1 JOIN Customer_Events AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id HAVING count(*)  >=  3	local_govt_and_lot

SELECT t1.customer_event_id FROM customer_events AS t1 JOIN customer_event_notes AS t2 ON t1.customer_event_id = t2.customer_event_id	local_govt_and_lot
SELECT t1.customer_event_id FROM customer_events AS t1 JOIN customer_event_notes AS t2 ON t1.customer_event_id = t2.customer_event_id GROUP BY t1.customer_event_id HAVING count(*) > 5	local_govt_and_lot
SELECT T1.Customer_Event_ID  ,  T1.property_id FROM Customer_Events AS T1 JOIN Customer_Event_Notes AS T2 ON T1.Customer_Event_ID  =  T2.Customer_Event_ID GROUP BY T1.customer_event_id HAVING count(*) BETWEEN 1 AND 3	local_govt_and_lot

SELECT min(Date_and_Date) FROM Timed_Status_of_Things	local_govt_and_lot
SELECT * FROM Timed_Status_of_Things WHERE Date_and_Date < '2017-06-19 02:59:21'	local_govt_and_lot
SELECT * FROM Timed_Status_of_Things WHERE Status_of_Thing_Code = 'Close' OR Date_and_Date < '2017-06-19 02:59:21'	local_govt_and_lot
SELECT DISTINCT t2.thing_id ,  t2.Type_of_Thing_Code FROM Timed_Status_of_Things AS t1 JOIN Things AS t2 ON t1.thing_id  =  t2.thing_id WHERE t1.Status_of_Thing_Code  =  'Close' OR t1.Date_and_Date  <  '2017-06-19 02:59:21'	local_govt_and_lot

SELECT DISTINCT service_details FROM things	local_govt_and_lot
SELECT count(*), service_details FROM things GROUP BY service_details	local_govt_and_lot
SELECT * FROM things WHERE service_details = 'Unsatisfied'	local_govt_and_lot
SELECT count(DISTINCT T2.Location_Code) FROM Things AS T1 JOIN Timed_Locations_of_Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.service_details  =  'Unsatisfied'	local_govt_and_lot

SELECT DISTINCT parent_organization_id FROM organizations	local_govt_and_lot
SELECT count(*) FROM organizations WHERE parent_organization_id = organization_id	local_govt_and_lot
SELECT organization_id FROM organizations EXCEPT SELECT parent_organization_id FROM organizations	local_govt_and_lot

SELECT * FROM residents ORDER BY other_details	local_govt_and_lot
SELECT count(*) FROM residents WHERE other_details LIKE '%Prof.%'	local_govt_and_lot
SELECT other_details FROM residents WHERE other_details LIKE '%Miss%'	local_govt_and_lot

SELECT DISTINCT building FROM classroom	college_2
SELECT DISTINCT building FROM classroom WHERE capacity  >  50	college_2

SELECT * FROM classroom WHERE building ! =  'Lamberton'	college_2
SELECT count(*) FROM classroom WHERE building ! =  'Lamberton'	college_2

SELECT avg(budget) FROM department	college_2
SELECT * FROM department WHERE budget  >  (SELECT avg(budget) FROM department)	college_2
SELECT dept_name ,  building FROM department WHERE budget  >  (SELECT avg(budget) FROM department)	college_2

SELECT * FROM classroom WHERE capacity BETWEEN 50 AND 100	college_2
SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100	college_2

SELECT * FROM department ORDER BY budget DESC	college_2
SELECT * FROM department ORDER BY budget DESC LIMIT 1	college_2
SELECT dept_name ,  building FROM department ORDER BY budget DESC LIMIT 1	college_2

SELECT name FROM student WHERE dept_name  =  'History'	college_2
SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1	college_2

SELECT * FROM classroom WHERE building  =  'Lamberton'	college_2
SELECT count(*) FROM classroom WHERE building  =  'Lamberton'	college_2

SELECT DISTINCT s_id FROM advisor	college_2
SELECT count(DISTINCT s_id) FROM advisor	college_2

SELECT DISTINCT dept_name FROM course	college_2
SELECT count(DISTINCT dept_name) FROM course	college_2

SELECT * FROM course WHERE dept_name  =  'Physics'	college_2
SELECT DISTINCT course_id FROM course WHERE dept_name  =  'Physics'	college_2
SELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'	college_2

SELECT * FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id	college_2
SELECT * FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  2	college_2
SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  2	college_2

SELECT * FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1	college_2
SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1	college_2

SELECT course_id FROM prereq	college_2
SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)	college_2

SELECT course_id FROM prereq	college_2
SELECT * FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)	college_2
SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)	college_2

SELECT DISTINCT id FROM teaches	college_2
SELECT COUNT (DISTINCT id) FROM teaches	college_2

SELECT budget FROM department WHERE dept_name  =  'Marketing'	college_2
SELECT budget FROM department WHERE dept_name  =  'Finance'	college_2
SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'	college_2

SELECT * FROM instructor WHERE name LIKE '%Soisalon%'	college_2
SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'	college_2

SELECT count(*) FROM classroom WHERE building  =  'Lamberton'	college_2
SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50	college_2

SELECT avg(budget) FROM department	college_2
SELECT * FROM department WHERE budget  >  (SELECT avg(budget) FROM department)	college_2
SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)	college_2

SELECT name FROM instructor WHERE dept_name  =  'Statistics'	college_2
SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1	college_2

SELECT title FROM course WHERE dept_name  =  'Statistics'	college_2
SELECT title FROM course WHERE dept_name  =  'Statistics' INTERSECT SELECT title FROM course WHERE dept_name  =  'Psychology'	college_2

SELECT title FROM course WHERE dept_name  =  'Statistics'	college_2
SELECT title FROM course WHERE dept_name  =  'Statistics' EXCEPT SELECT title FROM course WHERE dept_name  =  'Psychology'	college_2

SELECT id FROM teaches WHERE semester  =  'Fall' AND YEAR  =  2009	college_2
SELECT id FROM teaches WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT id FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010	college_2

SELECT DISTINCT name FROM student	college_2
SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  2009 OR YEAR  =  2010	college_2

SELECT dept_name ,  count(*) FROM course GROUP BY dept_name	college_2
SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC	college_2
SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3	college_2

SELECT dept_name ,  sum(credits) FROM course GROUP BY dept_name	college_2
SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1	college_2

SELECT title FROM course	college_2
SELECT title FROM course ORDER BY title ,  credits	college_2

SELECT dept_name FROM department ORDER BY budget	college_2
SELECT dept_name FROM department ORDER BY budget LIMIT 1	college_2

SELECT * FROM department ORDER BY budget DESC	college_2
SELECT dept_name ,  building FROM department ORDER BY budget DESC	college_2

SELECT name FROM instructor ORDER BY salary DESC	college_2
SELECT name FROM instructor ORDER BY salary DESC LIMIT 1	college_2

SELECT * FROM instructor	college_2
SELECT * FROM instructor ORDER BY salary	college_2

SELECT name ,  dept_name FROM student	college_2
SELECT name ,  dept_name FROM student ORDER BY tot_cred	college_2

SELECT T1.title FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id WHERE YEAR  =  2008	college_2
SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  2008	college_2
SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  2008 ORDER BY T1.title	college_2

SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id	college_2
SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1	college_2

SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id	college_2
SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1	college_2

SELECT count(*) FROM classroom WHERE capacity  >  50	college_2
SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building	college_2

SELECT max(capacity) ,  avg(capacity) FROM classroom	college_2
SELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building	college_2

SELECT title FROM course	college_2
SELECT title FROM course GROUP BY title HAVING count(*)  >  1	college_2

SELECT sum(credits) FROM course	college_2
SELECT sum(credits) ,  dept_name FROM course GROUP BY dept_name	college_2

SELECT avg(salary) FROM instructor	college_2
SELECT dept_name FROM instructor GROUP BY dept_name HAVING avg(salary)  >  (SELECT avg(salary) FROM instructor)	college_2
SELECT min(salary) ,  dept_name FROM instructor GROUP BY dept_name HAVING avg(salary)  >  (SELECT avg(salary) FROM instructor)	college_2

SELECT count(*) ,  YEAR FROM SECTION GROUP BY YEAR	college_2
SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR	college_2

SELECT YEAR ,  count(*) FROM SECTION GROUP BY YEAR	college_2
SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1	college_2

SELECT semester ,  YEAR ,  count(*) FROM SECTION GROUP BY semester ,  YEAR	college_2
SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1	college_2

SELECT dept_name ,  count(*) FROM student GROUP BY dept_name	college_2
SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1	college_2

SELECT count(*) FROM student	college_2
SELECT count(*) ,  dept_name FROM student GROUP BY dept_name	college_2

SELECT semester ,  YEAR ,  count(*) FROM takes GROUP BY semester ,  YEAR	college_2
SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1	college_2

SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id	college_2
SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'	college_2

SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id	college_2
SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'	college_2
SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'History'	college_2

SELECT course_id FROM prereq	college_2
SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq	college_2

SELECT course_id FROM prereq	college_2
SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)	college_2

SELECT prereq_id FROM prereq	college_2
SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance'	college_2
SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')	college_2

SELECT course_id FROM prereq	college_2
SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry'	college_2
SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')	college_2

SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003	college_2
SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)	college_2

SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE semester  =  'Fall' AND YEAR  =  2010	college_2
SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND YEAR  =  2010	college_2

SELECT name FROM instructor	college_2
SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'	college_2

SELECT i_id FROM advisor	college_2
SELECT T1.i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'Math'	college_2
SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math'	college_2

SELECT T1.i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'Math'	college_2
SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math'	college_2
SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred	college_2

SELECT prereq_id FROM prereq	college_2
SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing'	college_2
SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')	college_2

SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id	college_2
SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id ORDER BY T3.tot_cred DESC LIMIT 1	college_2

SELECT id FROM teaches	college_2
SELECT id FROM instructor WHERE id NOT IN (SELECT id FROM teaches)	college_2
SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)	college_2

SELECT id FROM teaches	college_2
SELECT id FROM instructor EXCEPT SELECT id FROM teaches	college_2

SELECT id FROM teaches WHERE semester  =  'Spring'	college_2
SELECT id FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')	college_2
SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')	college_2

SELECT dept_name ,  avg(salary) FROM instructor GROUP BY dept_name	college_2
SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT 1	college_2

SELECT dept_name FROM department ORDER BY budget DESC	college_2
SELECT count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name ORDER BY T2.budget DESC LIMIT 1	college_2
SELECT avg(T1.salary) ,  count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name ORDER BY T2.budget DESC LIMIT 1	college_2

SELECT max(capacity) FROM classroom	college_2
SELECT T3.title FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building  =  T2.building AND T1.room_number  =  T2.room_number JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T1.capacity  =  (SELECT max(capacity) FROM classroom)	college_2
SELECT T3.title ,  T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building  =  T2.building AND T1.room_number  =  T2.room_number JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T1.capacity  =  (SELECT max(capacity) FROM classroom)	college_2

SELECT * FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology'	college_2
SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')	college_2

SELECT count(DISTINCT id) FROM student	college_2
SELECT count(DISTINCT T2.id) ,  T1.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name GROUP BY T1.dept_name	college_2
SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name	college_2

SELECT T2.prereq_id FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id WHERE T1.title  =  'International Finance'	college_2
SELECT T1.id FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')	college_2
SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')	college_2

SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics'	college_2
SELECT name FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics')	college_2
SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics')	college_2

SELECT * FROM course WHERE dept_name  =  'Statistics'	college_2
SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'	college_2

SELECT * FROM course WHERE dept_name  =  'Psychology' ORDER BY title	college_2
SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title	college_2

SELECT name FROM instructor	college_2
SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'	college_2

SELECT name FROM instructor WHERE salary  >  80000	college_2
SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000	college_2

SELECT name FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID	college_2
SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID	college_2

SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID	college_2
SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  'Art'	college_2

SELECT name FROM instructor	college_2
SELECT name FROM instructor WHERE name LIKE '%dar%'	college_2

SELECT DISTINCT name FROM  instructor	college_2
SELECT DISTINCT name FROM  instructor ORDER BY name	college_2

SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009	college_2
SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 UNION SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010	college_2

SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009	college_2
SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010	college_2

SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009	college_2
SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010	college_2

SELECT max(salary) FROM instructor	college_2
SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor)	college_2

SELECT DISTINCT ID FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010	college_2
SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010	college_2

SELECT dept_name FROM instructor GROUP BY dept_name HAVING AVG (salary)  >  42000	college_2
SELECT dept_name ,  AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary)  >  42000	college_2

SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology'	college_2
SELECT id FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')	college_2
SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')	college_2

SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology'	college_2
SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')	college_2

SELECT COUNT(*) FROM county_public_safety	county_public_safety
SELECT avg(Crime_rate) FROM county_public_safety	county_public_safety
SELECT min(Crime_rate) ,  max(Crime_rate) FROM county_public_safety	county_public_safety

SELECT AVG(Population) FROM county_public_safety	county_public_safety
SELECT Population FROM county_public_safety ORDER BY Population DESC LIMIT 1	county_public_safety
SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1	county_public_safety

SELECT White FROM city ORDER BY White ASC LIMIT 1	county_public_safety
SELECT White FROM city ORDER BY White DESC LIMIT 5	county_public_safety
SELECT Name FROM city ORDER BY White DESC LIMIT 5	county_public_safety

SELECT AVG(Police_officers) FROM county_public_safety	county_public_safety
SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1	county_public_safety
SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)	county_public_safety

SELECT AVG(population) FROM county_public_safety	county_public_safety
SELECT COUNT(*) FROM county_public_safety WHERE population  >  20000	county_public_safety
SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)	county_public_safety

SELECT max(White) FROM city	county_public_safety
SELECT COUNT(*) FROM city WHERE White  >  90	county_public_safety
SELECT County_ID FROM city WHERE White  >  90	county_public_safety
SELECT T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID WHERE T1.White  >  90	county_public_safety

SELECT COUNT(DISTINCT LOCATION) FROM county_public_safety	county_public_safety
SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT(*) ASC LIMIT 1	county_public_safety
SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1	county_public_safety

SELECT County_ID, COUNT(*) FROM city GROUP BY County_ID	county_public_safety
SELECT County_ID, COUNT(*) FROM city GROUP BY County_ID ORDER BY COUNT(*) DESC	county_public_safety
SELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city)	county_public_safety

SELECT COUNT(*) FROM county_public_safety WHERE LOCATION  =  "East"	county_public_safety
SELECT COUNT(*) FROM county_public_safety WHERE LOCATION  =  "West"	county_public_safety
SELECT Police_force FROM county_public_safety WHERE LOCATION  =  "East"	county_public_safety
SELECT Police_force FROM county_public_safety WHERE LOCATION  =  "East" INTERSECT SELECT Police_force FROM county_public_safety WHERE LOCATION  =  "West"	county_public_safety

